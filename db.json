{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/material/source/css/disqus-proxy.css","path":"css/disqus-proxy.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/disqus-proxy.min.css","path":"css/disqus-proxy.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/duoshuo.css","path":"css/duoshuo.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/fontawesome.min.css","path":"css/fontawesome.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/gallery.min.css","path":"css/gallery.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/ie-blocker.css","path":"css/ie-blocker.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/material-icons.css","path":"css/material-icons.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify.css","path":"css/prettify.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify.min.css","path":"css/prettify.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/uc.css","path":"css/uc.css","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","path":"fonts/MaterialIcons-Regular.woff","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","path":"fonts/MaterialIcons-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/material/source/css/duoshuo.min.css","path":"css/duoshuo.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/img/browserstack_logo.png","path":"img/browserstack_logo.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/sidebar_header.png","path":"img/sidebar_header.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/upyun_logo.svg","path":"img/upyun_logo.svg","modified":1,"renderable":1},{"_id":"themes/material/source/js/MathJax.js","path":"js/MathJax.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/Valine.min.js","path":"js/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/hanabi-browser-bundle.js","path":"js/hanabi-browser-bundle.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.en.js","path":"js/ie-blocker.en.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","path":"js/ie-blocker.zhCN.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/lsloader.js","path":"js/lsloader.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/lsloader.min.js","path":"js/lsloader.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/nprogress.js","path":"js/nprogress.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/prettify.min.js","path":"js/prettify.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/queue.js","path":"js/queue.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/queue.min.js","path":"js/queue.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":1,"renderable":1},{"_id":"themes/material/source/css/material.css","path":"css/material.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/material.min.css","path":"css/material.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/style.min.css","path":"css/style.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","path":"fonts/MaterialIcons-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/material/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/daily_pic.png","path":"img/daily_pic.png","modified":1,"renderable":1},{"_id":"themes/material/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/js.js","path":"js/js.js","modified":1,"renderable":1},{"_id":"themes/material/source/js/js.min.js","path":"js/js.min.js","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-cave-dark.min.css","path":"css/prettify/atelier-cave-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-dune-dark.min.css","path":"css/prettify/atelier-dune-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-dune-light.min.css","path":"css/prettify/atelier-dune-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-cave-light.min.css","path":"css/prettify/atelier-cave-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-estuary-light.min.css","path":"css/prettify/atelier-estuary-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-estuary-dark.min.css","path":"css/prettify/atelier-estuary-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-forest-dark.min.css","path":"css/prettify/atelier-forest-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-forest-light.min.css","path":"css/prettify/atelier-forest-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-heath-dark.min.css","path":"css/prettify/atelier-heath-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-heath-light.min.css","path":"css/prettify/atelier-heath-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-lakeside-dark.min.css","path":"css/prettify/atelier-lakeside-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-lakeside-light.min.css","path":"css/prettify/atelier-lakeside-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-plateau-dark.min.css","path":"css/prettify/atelier-plateau-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-plateau-light.min.css","path":"css/prettify/atelier-plateau-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-savanna-dark.min.css","path":"css/prettify/atelier-savanna-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-savanna-light.min.css","path":"css/prettify/atelier-savanna-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-seaside-dark.min.css","path":"css/prettify/atelier-seaside-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-seaside-light.min.css","path":"css/prettify/atelier-seaside-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-dark.min.css","path":"css/prettify/atelier-sulphurpool-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-light.min.css","path":"css/prettify/atelier-sulphurpool-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/github-v2.min.css","path":"css/prettify/github-v2.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/github.min.css","path":"css/prettify/github.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/hemisu-dark.min.css","path":"css/prettify/hemisu-dark.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/hemisu-light.min.css","path":"css/prettify/hemisu-light.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night-bright.min.css","path":"css/prettify/tomorrow-night-bright.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night-blue.min.css","path":"css/prettify/tomorrow-night-blue.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night-eighties.min.css","path":"css/prettify/tomorrow-night-eighties.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night.min.css","path":"css/prettify/tomorrow-night.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow.min.css","path":"css/prettify/tomorrow.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/vibrant-ink.min.css","path":"css/prettify/vibrant-ink.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/css/prettify/tranquil-heart.min.css","path":"css/prettify/tranquil-heart.min.css","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","path":"fonts/MaterialIcons-Regular.eot","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","path":"img/footer/footer_ico-bilibili.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","path":"img/footer/footer_ico-facebook.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","path":"img/footer/footer_ico-github.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","path":"img/footer/footer_ico-gplus.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","path":"img/footer/footer_ico-instagram.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","path":"img/footer/footer_ico-telegram.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","path":"img/footer/footer_ico-linkedin.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","path":"img/footer/footer_ico-tumblr.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","path":"img/footer/footer_ico-twitter.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-v2ex.svg","path":"img/footer/footer_ico-v2ex.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","path":"img/footer/footer_ico-weibo.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","path":"img/footer/footer_ico-zhihu.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/gallery/arrow.svg","path":"img/gallery/arrow.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/gallery/close.svg","path":"img/gallery/close.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/gallery/spinner.svg","path":"img/gallery/spinner.svg","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-10.png","path":"img/random/material-10.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-12.png","path":"img/random/material-12.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-17.png","path":"img/random/material-17.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-19.png","path":"img/random/material-19.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-3.png","path":"img/random/material-3.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-4.png","path":"img/random/material-4.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-6.png","path":"img/random/material-6.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-8.png","path":"img/random/material-8.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-9.png","path":"img/random/material-9.png","modified":1,"renderable":1},{"_id":"themes/material/source/js/gallery/gallery.js","path":"js/gallery/gallery.js","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-1.png","path":"img/random/material-1.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-11.png","path":"img/random/material-11.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-13.png","path":"img/random/material-13.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-15.png","path":"img/random/material-15.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-14.png","path":"img/random/material-14.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-16.png","path":"img/random/material-16.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-18.png","path":"img/random/material-18.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-2.png","path":"img/random/material-2.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-5.png","path":"img/random/material-5.png","modified":1,"renderable":1},{"_id":"themes/material/source/img/random/material-7.png","path":"img/random/material-7.png","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","path":"fonts/Roboto-Black.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","path":"fonts/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","path":"fonts/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","path":"fonts/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","path":"fonts/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","path":"fonts/Roboto-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/material/source/img/bg.png","path":"img/bg.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/material/.eslintrc.json","hash":"f4cdab9b046c8ff4860c1962d3e58c41801ee0fc","modified":1527815339670},{"_id":"themes/material/.gitignore","hash":"32e44c1f22a56c1ca65f196f8c16a1901c77b461","modified":1527815339670},{"_id":"themes/material/.travis.yml","hash":"a62e497c5914b403d5ccd86624238358c45c0760","modified":1527815339671},{"_id":"themes/material/CONTRIBUTING.md","hash":"502dc2e3887b9667b898709c3aab649884f3fdfa","modified":1527815339671},{"_id":"themes/material/CONTRIBUTING.zh-cn.md","hash":"84b5b1d1b77b0ec4e49ebb1a773965ac7c19ba7e","modified":1527815339671},{"_id":"themes/material/LICENSE","hash":"2ea9f02239dc6b5fdbfff01fcdf85bcc8c13667c","modified":1527815339671},{"_id":"themes/material/README.md","hash":"0c869cc99e11c4b1a7bcbc7c111fea5e5e6db2f9","modified":1527815339672},{"_id":"themes/material/_config.yml","hash":"19b4abdee250ab37153c7eede56887d8cc9e93bf","modified":1528095654532},{"_id":"themes/material/contributing.json","hash":"f6f039672fef8e0267d9586c73d1a425c6c882d8","modified":1527815339672},{"_id":"themes/material/lint.sh","hash":"7d8c693175cf06c5de1dc0b964e13b2f052e6743","modified":1527815339687},{"_id":"themes/material/package.json","hash":"6ef761d0b715c48af86cad0fa8ba584b5fcc3dbb","modified":1527815339687},{"_id":"source/_posts/Python-metaclass研究.md","hash":"b58ffb68d08c83fb79453ed4f1a922a2fd5dd16b","modified":1528082474525},{"_id":"source/_posts/Python下划线命名含义.md","hash":"5bcf2349ca461cdec5eb1a8ad4e32bc3a3fb4ca2","modified":1528079386769},{"_id":"source/_posts/协程-gevent.md","hash":"3bdfa5ab8925e4b75f0872297c1e2102377ae67e","modified":1529313000452},{"_id":"source/_posts/理解Python装饰器.md","hash":"f6698548f8a0666abc438da83e5ba71ba0e1a8e3","modified":1528183545243},{"_id":"themes/material/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1527815339660},{"_id":"themes/material/.git/config","hash":"7f8f7c4b6a720242e67dcf733b8111edbdb7f889","modified":1527815339663},{"_id":"themes/material/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1527815264042},{"_id":"themes/material/.git/index","hash":"291e3bd487a2b78bf71668117e38b587e8fefbe8","modified":1527815373970},{"_id":"themes/material/.git/packed-refs","hash":"0274581c30fa3a97e03eca31d614e936245565a5","modified":1527815339657},{"_id":"themes/material/.github/ISSUE_TEMPLATE.md","hash":"2117c7a87948799c8e21130f6f5e0bdfce5d9ad2","modified":1527815339670},{"_id":"themes/material/.github/PULL_REQUEST_TEMPLATE.md","hash":"3f7bdaf68dca7d537f8c0dd05185238148ef4b0e","modified":1527815339670},{"_id":"themes/material/languages/ar.yml","hash":"5f112bda9600da133567303cf911ee148eaba807","modified":1527815339672},{"_id":"themes/material/languages/en.yml","hash":"8953930a994f3e9bcdfc24360ccb7904c1fcaaa1","modified":1527815339672},{"_id":"themes/material/languages/de.yml","hash":"61afd14ef56e862346ac4b55d0e36223f4a19137","modified":1527815339672},{"_id":"themes/material/languages/es.yml","hash":"485820c64bccba9dc9e0ebbb8f62d0cd580809dc","modified":1527815339673},{"_id":"themes/material/languages/fr.yml","hash":"3977c7809b3de4b5dd9e3f84e47b093f73282fe9","modified":1527815339673},{"_id":"themes/material/languages/ja.yml","hash":"a2ca0f671190960ae6b8691babf2ea7496cf7587","modified":1527815339673},{"_id":"themes/material/languages/ms.yml","hash":"16429e0bb9b7cdd8fa3e96c7596eade9314d50c3","modified":1527815339674},{"_id":"themes/material/languages/nl_NL.yml","hash":"45b81430941ddbcd93acc14e2392b114983cf6bd","modified":1527815339674},{"_id":"themes/material/languages/pt-BR.yml","hash":"96514cb251b5464f03da8214607d13d140fa2394","modified":1527815339674},{"_id":"themes/material/languages/ru.yml","hash":"e71694ad0091fe8f7d7d7a38da61680b4b812945","modified":1527815339674},{"_id":"themes/material/languages/zh-CN.yml","hash":"e96d058b1d9addc4183c5d6bbbf0717009181e6f","modified":1527815339674},{"_id":"themes/material/languages/zh-TW.yml","hash":"01e35f701c973a77d89c2904a14eab987f8dafbb","modified":1527815339674},{"_id":"themes/material/layout/index.ejs","hash":"b68f162e312d6db8fc40b271d932e85fa1bf6961","modified":1527815339687},{"_id":"themes/material/layout/layout.ejs","hash":"098d8702f88fe12d717e9af014b4d1248bc0646d","modified":1527815339687},{"_id":"themes/material/layout/post.ejs","hash":"f47daa22f1a2cdba00ec17a49c14da00b4d8e4d2","modified":1527815339687},{"_id":"themes/material/scripts/helper.js","hash":"3c2df00f94625e8061b71fff33fdd33aad58b48f","modified":1527815339687},{"_id":"themes/material/layout/_partial/Isolation-post-info.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527815339674},{"_id":"themes/material/scripts/lib/font_lsload.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527815339688},{"_id":"themes/material/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1527815264391},{"_id":"themes/material/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1527815264043},{"_id":"themes/material/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1527815264043},{"_id":"themes/material/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1527815264392},{"_id":"themes/material/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1527815264392},{"_id":"themes/material/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1527815264393},{"_id":"themes/material/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1527815264394},{"_id":"themes/material/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1527815264393},{"_id":"themes/material/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1527815264394},{"_id":"themes/material/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1527815264394},{"_id":"themes/material/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1527815264395},{"_id":"themes/material/.git/logs/HEAD","hash":"2ea4b7954cc32c24d7226ef945a9f7087323f1e4","modified":1527815339661},{"_id":"themes/material/layout/_partial/Isolation-post_entry.ejs","hash":"b4370fb70d4c1635a37448a726f55a3dd3c698f3","modified":1527815339675},{"_id":"themes/material/layout/_partial/Paradox-post-info.ejs","hash":"e0d9f09dad996271b355fed6c022cd781637da5b","modified":1527815339675},{"_id":"themes/material/layout/_partial/Paradox-post_entry-thumbnail.ejs","hash":"18dbcf7ad03164c72beeff7d4e6238b2762cb30d","modified":1527815339675},{"_id":"themes/material/layout/_partial/Paradox-search.ejs","hash":"a53365c8a50db079eb6602350aa3f53d3712797d","modified":1527815339676},{"_id":"themes/material/layout/_partial/Paradox-post_entry.ejs","hash":"88e67e5a98a5e9f7fcf5334ae39048f95026d341","modified":1527815339675},{"_id":"themes/material/layout/_partial/Paradox-post-thumbnail.ejs","hash":"2fc593894a8d22127e5bf04cdd4fc509b94e6e96","modified":1527815339675},{"_id":"themes/material/layout/_partial/blog_info.ejs","hash":"88e8af182d531dc6a890e37b807563c04c2bee7f","modified":1527815339676},{"_id":"themes/material/layout/_partial/comment.ejs","hash":"22c8ddb0d9033257664954bd2e2ee996a95e5dc3","modified":1527815339676},{"_id":"themes/material/layout/_partial/config_css.ejs","hash":"e92d348a2e251af279bfc2e7fb148bc1b39d568f","modified":1527815339676},{"_id":"themes/material/layout/_partial/config_font.ejs","hash":"aad06abb2ca261e81b1d87e722e6d34d146a1e4a","modified":1527815339676},{"_id":"themes/material/layout/_partial/daily_pic.ejs","hash":"6362b4c227b10f28f8800ea94313e5a9eeb7db84","modified":1527815339676},{"_id":"themes/material/layout/_partial/footer-left.ejs","hash":"608aa4af468654d38d41c03ebd396f657d8657e9","modified":1527815339676},{"_id":"themes/material/layout/_partial/footer-option.ejs","hash":"72e3b126cd90b977570a394f4fe3b1dc3facd37b","modified":1527815339677},{"_id":"themes/material/layout/_partial/footer.ejs","hash":"304c0380d1aacc44f1f8dfcf4e10051bca5bdbb3","modified":1527815339677},{"_id":"themes/material/layout/_partial/footer_top.ejs","hash":"783ce418478682ee78a4f45dc6b17e4ddba2d6b4","modified":1527815339677},{"_id":"themes/material/layout/_partial/head.ejs","hash":"84efc594ba27ac03cb53fafd604ce4594f5245b2","modified":1527815339677},{"_id":"themes/material/layout/_partial/import_js.ejs","hash":"6d09a41c8b86931eec1862c592c82790ad35b4aa","modified":1527815339677},{"_id":"themes/material/layout/_partial/isolate-sns_list.ejs","hash":"74de1f8ef14b58c21eb7895e9c9b3f3080d40aa4","modified":1527815339678},{"_id":"themes/material/layout/_partial/isolate_info.ejs","hash":"92ba92a2f226b91427d6ae2b9709bd7f6b8a8427","modified":1527815339678},{"_id":"themes/material/layout/_partial/post-content.ejs","hash":"3680cd6b7ccc8a62f989c41e8ef7d036f6249418","modified":1527815339678},{"_id":"themes/material/layout/_partial/post-header.ejs","hash":"7783e66fef18e81cada1737174eadd758a4a2890","modified":1527815339678},{"_id":"themes/material/layout/_partial/post-info-share.ejs","hash":"df3ce5675f7271bcdf85ff26edc4b18ff1ecb078","modified":1527815339678},{"_id":"themes/material/layout/_partial/post-nav.ejs","hash":"eb9b9f252b525867da6358758aef546648439da0","modified":1527815339678},{"_id":"themes/material/layout/_partial/sidebar-footer.ejs","hash":"4a8e5b9e67a898cbe4b67c474a25afc35bac03c0","modified":1527815339679},{"_id":"themes/material/layout/_partial/sidebar-footer_image.ejs","hash":"6837794ff4efd5689fbf6d2e091cf87f38192e3a","modified":1527815339679},{"_id":"themes/material/layout/_partial/sidebar-header.ejs","hash":"8569450b70066f8db0b8c97c0317e9558f84f8ed","modified":1527815339679},{"_id":"themes/material/layout/_partial/sidebar-navigation.ejs","hash":"7bdebbceacaef1864a7fb85c022c60892caf0bd0","modified":1527815339679},{"_id":"themes/material/layout/_partial/sidebar.ejs","hash":"e3c5c28ffadbca227345e65bc93a16bd313d86cc","modified":1527815339680},{"_id":"themes/material/layout/_partial/structured-data.ejs","hash":"e845df290185dc300cc4edcc08b50fddc5b6909b","modified":1527815339680},{"_id":"themes/material/layout/_partial/toc_button.ejs","hash":"6ed811c4bbd58e6d9b6c134d27dcc2e26b772007","modified":1527815339680},{"_id":"themes/material/layout/_widget/dnsprefetch.ejs","hash":"6c711e444175bd4fa8dea02ca5e0aed93bc5c96e","modified":1527815339684},{"_id":"themes/material/layout/_widget/leancloud-views.ejs","hash":"75e8d213179fff42fad7e1e9fe14ce38cb6ab461","modified":1527815339685},{"_id":"themes/material/layout/_widget/leancloud-like.ejs","hash":"25b97a70c0e80be62d8f483a12976faefcd632ea","modified":1527815339685},{"_id":"themes/material/layout/_widget/mathjax.ejs","hash":"3838d3ce578cc432830035b1acb13df06d7f443a","modified":1527815339685},{"_id":"themes/material/layout/_widget/leancloud-views_num.ejs","hash":"a5ce35f2a456dc424e09b7e105b8d789dfe008df","modified":1527815339685},{"_id":"themes/material/layout/_widget/nprogress.ejs","hash":"a85d9b66785ade000094042223ad52854da8aab4","modified":1527815339685},{"_id":"themes/material/layout/_widget/page-gallery.ejs","hash":"ab34cca1bba0163769b4f01e62d9685bcb952c04","modified":1527815339685},{"_id":"themes/material/layout/_widget/page-links.ejs","hash":"16b39db04540364c96783ffaad0f928d6254447f","modified":1527815339686},{"_id":"themes/material/layout/_widget/page-tagcloud.ejs","hash":"3c39def3bc3bea1453706538399898b6b9845b03","modified":1527815339686},{"_id":"themes/material/layout/_widget/qrcode.ejs","hash":"3212e5d29fe8490c5d9a844ec9c2ce9925532de8","modified":1527815339686},{"_id":"themes/material/layout/_widget/search-local-js.ejs","hash":"ed7602396e48ca353baf3bc0002bc364f1a6b746","modified":1527815339686},{"_id":"themes/material/layout/_widget/page-timeline.ejs","hash":"3210134da89219c3a213cba272fc2b75f7a345a6","modified":1527815339686},{"_id":"themes/material/layout/_widget/search-swiftype-js.ejs","hash":"3b3030c03a0bd08bf21f215a243af81302cdd34e","modified":1527815339686},{"_id":"themes/material/scripts/lib/css_lsload.js","hash":"43075dec9add42ba3fff4b914e4a9b31e94ee264","modified":1527815339688},{"_id":"themes/material/scripts/lib/get_file_hex.js","hash":"079a20b2919d5aa77169e1fb243ef3d26a46401c","modified":1527815339688},{"_id":"themes/material/scripts/lib/js_hex.js","hash":"c6d6b268553574f5ea07559ffba9579b47a7c3d6","modified":1527815339688},{"_id":"themes/material/scripts/lib/path_for.js","hash":"490d6ef68a7dc2d7b6f863e22741ecd718ff4271","modified":1527815339689},{"_id":"themes/material/scripts/lib/js_lsload.js","hash":"1fa0da2287a00287c853bd2a013155e24a6ca0ee","modified":1527815339689},{"_id":"themes/material/source/css/disqus-proxy.css","hash":"770776d8cec27cd5661bdfd59eff9af263439989","modified":1527815339689},{"_id":"themes/material/source/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1527815339689},{"_id":"themes/material/source/css/duoshuo.css","hash":"7372200a8d019d4c368283de089d2e0481cb1de7","modified":1527815339690},{"_id":"themes/material/source/css/fontawesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1527815339690},{"_id":"themes/material/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1527815339691},{"_id":"themes/material/source/css/ie-blocker.css","hash":"121016e89d5f8b1f84f2e0a22da30f3c096de36e","modified":1527815339691},{"_id":"themes/material/source/css/material-icons.css","hash":"f6f95fe5190f3c65931847246621fb83754eb00c","modified":1527815339691},{"_id":"themes/material/source/css/prettify.css","hash":"d4685a9d7c7d09f799f5ed618bf23d71857744ab","modified":1527815339694},{"_id":"themes/material/source/css/prettify.min.css","hash":"62edd8f08656463b0e077dcf893faa3cc8eb5fe4","modified":1527815339694},{"_id":"themes/material/source/css/uc.css","hash":"9dc78a2ac468ca39664983789c4a9f9d145d1aad","modified":1527815339701},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1527815339707},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1527815339707},{"_id":"themes/material/source/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1527815339690},{"_id":"themes/material/source/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1527815339747},{"_id":"themes/material/source/img/favicon.png","hash":"b08658a08e5e0357e8e5dab9324667704159c7a7","modified":1527818325992},{"_id":"themes/material/source/img/logo.png","hash":"ef16360fc6b68e28c2cf78f7c7d589a39be78279","modified":1527822881899},{"_id":"themes/material/source/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1527815339764},{"_id":"themes/material/source/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1527815339765},{"_id":"themes/material/source/js/MathJax.js","hash":"1bb65ddb64e17d7424af7c29ab9626fc4f4388e6","modified":1527815339765},{"_id":"themes/material/source/js/Valine.min.js","hash":"6a287a99a772a0ea8f98b133523429c9250cc67f","modified":1527815339765},{"_id":"themes/material/source/js/hanabi-browser-bundle.js","hash":"a6dae5f17bb2237b1248da3d6c331bf8cbacc22d","modified":1527815339766},{"_id":"themes/material/source/js/ie-blocker.en.js","hash":"0bbd768e3be0081cf8d3fc3a9568c6a0f951ada7","modified":1527815339766},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","hash":"198ffa1583343a5b5bf5e52afcfbff96fd0ef569","modified":1527815339767},{"_id":"themes/material/source/js/lazyload.min.js","hash":"bccbdcb5e5c13543dc5cc764073e3a454739d458","modified":1527815339769},{"_id":"themes/material/source/js/lsloader.js","hash":"05b84a6e8ba71e158c42e3527483787f35fdc48e","modified":1527815339769},{"_id":"themes/material/source/js/lsloader.min.js","hash":"1a68a8d267948ea8475245b7d365a1a1bd8f732e","modified":1527815339770},{"_id":"themes/material/source/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1527815339770},{"_id":"themes/material/source/js/prettify.min.js","hash":"69908fe0a09cee107c25cb5d769b861723e7b7bb","modified":1527815339771},{"_id":"themes/material/source/js/queue.js","hash":"1d6f5257cc2392ee2c5c92631833faa39fac3f9f","modified":1527815339771},{"_id":"themes/material/source/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1527815339771},{"_id":"themes/material/source/js/smoothscroll.js","hash":"53204da28f2ccfd4af92511969319c574da1f7b5","modified":1527815339771},{"_id":"themes/material/source/css/material.css","hash":"f5cad266eaa2207ad8871e5b290a2a9ec4f097e7","modified":1527815339693},{"_id":"themes/material/source/css/material.min.css","hash":"1a19febb9214ab689b02f5bb8ccb23579e6c1181","modified":1527815339694},{"_id":"themes/material/source/css/style.min.css","hash":"a9e9b33e1fcf818f08a04b909c86f2460a05f060","modified":1527815339701},{"_id":"themes/material/source/css/style.css","hash":"2ba548914453b4f333895597c030b6211ac11a45","modified":1527815339700},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1527815339706},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1527815339746},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1527815339746},{"_id":"themes/material/source/img/avatar.png","hash":"625183dc4ec8265fadd94aee2bbff130fe230b32","modified":1527817141756},{"_id":"themes/material/source/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1527815339748},{"_id":"themes/material/source/js/jquery.min.js","hash":"d0c03f4b0c3b72172804cbc5d19e44b3a0a9a171","modified":1527815339767},{"_id":"themes/material/source/js/js.js","hash":"7a0a8a59f37914986016ffdc36f3415bb6a3f505","modified":1527815339768},{"_id":"themes/material/source/js/js.min.js","hash":"709d347d3be033b841de0493b7cf532b594bb1f6","modified":1527815339769},{"_id":"themes/material/.git/refs/heads/master","hash":"cddd42575fbd9b539274771d90a7e66b1b6b8945","modified":1527815339661},{"_id":"themes/material/layout/_widget/analytics/baidu-analytics.ejs","hash":"3880bcbbdeb4aa53056df95eb34362c87255852e","modified":1527815339680},{"_id":"themes/material/layout/_widget/analytics/cnzz-analytics.ejs","hash":"19c3e5b472a7c68182138be4d4485a59847604ad","modified":1527815339680},{"_id":"themes/material/layout/_widget/analytics/google-analytics.ejs","hash":"740093a4a47c691bcea9aaea69f4d507b1f9e294","modified":1527815339681},{"_id":"themes/material/source/css/prettify/atelier-cave-dark.min.css","hash":"cb0156cdc36500a26b232ae1c81fdc880eba85e7","modified":1527815339694},{"_id":"themes/material/source/css/prettify/atelier-dune-dark.min.css","hash":"c5094d99ca0e619d97860c88211bf908fdf830b1","modified":1527815339695},{"_id":"themes/material/source/css/prettify/atelier-dune-light.min.css","hash":"b3ad98483e4d5bde72d52a15423d98e0d086db09","modified":1527815339695},{"_id":"themes/material/source/css/prettify/atelier-cave-light.min.css","hash":"4b62dc45aa351b071d6a434dc54fe8c2e15c85cc","modified":1527815339694},{"_id":"themes/material/source/css/prettify/atelier-estuary-light.min.css","hash":"1d12d8f7fa9c122a186ee76fdf681c191a68f104","modified":1527815339695},{"_id":"themes/material/source/css/prettify/atelier-estuary-dark.min.css","hash":"7e3a065cafeb3acc1d7178f64ef4265f5d5ad2b9","modified":1527815339695},{"_id":"themes/material/source/css/prettify/atelier-forest-dark.min.css","hash":"9296b851a5b66785a60afa5da5fe9080bda96bf5","modified":1527815339695},{"_id":"themes/material/source/css/prettify/atelier-forest-light.min.css","hash":"3532f6e86bf4afbba05f7a074b791b73174f9622","modified":1527815339695},{"_id":"themes/material/source/css/prettify/atelier-heath-dark.min.css","hash":"954309acd7918422382a3ff2f9c2988aec0ff956","modified":1527815339695},{"_id":"themes/material/source/css/prettify/atelier-heath-light.min.css","hash":"a67199fa580b3aa2df031e5d2028929d29ca3b45","modified":1527815339695},{"_id":"themes/material/source/css/prettify/atelier-lakeside-dark.min.css","hash":"18575fc6dff855e395a39d0383d2f18807091f0d","modified":1527815339696},{"_id":"themes/material/source/css/prettify/atelier-lakeside-light.min.css","hash":"e20e8ac64432fa1aa6f74792b58196af7cf79c12","modified":1527815339696},{"_id":"themes/material/source/css/prettify/atelier-plateau-dark.min.css","hash":"137e3c499a720da3c1d57b4dc53264b1d623e1c5","modified":1527815339696},{"_id":"themes/material/source/css/prettify/atelier-plateau-light.min.css","hash":"153801640fdcbb74c0de3f15345110f2210eb991","modified":1527815339696},{"_id":"themes/material/source/css/prettify/atelier-savanna-dark.min.css","hash":"fba92c652fd6704422b8f2bbc11706805a6faed0","modified":1527815339696},{"_id":"themes/material/source/css/prettify/atelier-savanna-light.min.css","hash":"d9425ffb7c60d646190c22b9a5f72091ee5f9ace","modified":1527815339697},{"_id":"themes/material/source/css/prettify/atelier-seaside-dark.min.css","hash":"e0e6bbacc75a349b1e49c236d374b0e42f1fd485","modified":1527815339697},{"_id":"themes/material/source/css/prettify/atelier-seaside-light.min.css","hash":"732750b75389c1c49204f37705e6abeee40ce64f","modified":1527815339697},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-dark.min.css","hash":"015a35dddaee153fa8bb71d7f3818a6ba4d120d8","modified":1527815339697},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-light.min.css","hash":"ab1a6200eab648cab443c3df77fde9b237ef27b6","modified":1527815339697},{"_id":"themes/material/source/css/prettify/github-v2.min.css","hash":"57630621d20842a529bdea7b17fc90f520e562ef","modified":1527815339697},{"_id":"themes/material/source/css/prettify/github.min.css","hash":"19cf828225288fa5c006f1d8f66c39d11f4ef7f2","modified":1527815339697},{"_id":"themes/material/source/css/prettify/hemisu-dark.min.css","hash":"a671248cfd573292026d2174817e82e593691052","modified":1527815339698},{"_id":"themes/material/source/css/prettify/hemisu-light.min.css","hash":"b2556ff41e513fd13d032ec84a37ee260a905815","modified":1527815339698},{"_id":"themes/material/source/css/prettify/tomorrow-night-bright.min.css","hash":"cf251fd3edfd736695272a0f1b41d509b7bb1fb9","modified":1527815339698},{"_id":"themes/material/source/css/prettify/tomorrow-night-blue.min.css","hash":"c442728d96485bcf816151fe6bd96993aae09852","modified":1527815339698},{"_id":"themes/material/source/css/prettify/tomorrow-night-eighties.min.css","hash":"6ce259d674bb4edda23eea32b2379be17d0e0e6e","modified":1527815339698},{"_id":"themes/material/source/css/prettify/tomorrow-night.min.css","hash":"d989206d124035494acb4b0cdc7fbc89f3b7d108","modified":1527815339699},{"_id":"themes/material/source/css/prettify/tomorrow.min.css","hash":"b2c6d610b77f0273fefab5aa4ad26a7f58956f87","modified":1527815339699},{"_id":"themes/material/source/css/prettify/vibrant-ink.min.css","hash":"c265bac6c31cf622b536b29c8a6bc46955d6fe63","modified":1527815339699},{"_id":"themes/material/source/css/prettify/tranquil-heart.min.css","hash":"0f6eefbdda8e410832e9c516a5dd19899217ef06","modified":1527815339699},{"_id":"themes/material/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1527815339703},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1527815339704},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1527815339740},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1527815339745},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1527815339750},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1527815339750},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1527815339750},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1527815339750},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1527815339751},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1527815339751},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1527815339751},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1527815339751},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1527815339751},{"_id":"themes/material/source/img/footer/footer_ico-v2ex.svg","hash":"90c5a53a27ba7cceeedbaffef9ce829abb1815c6","modified":1527815339751},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1527815339751},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1527815339752},{"_id":"themes/material/source/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1527815339752},{"_id":"themes/material/source/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1527815339752},{"_id":"themes/material/source/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1527815339752},{"_id":"themes/material/source/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1527815339753},{"_id":"themes/material/source/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1527815339755},{"_id":"themes/material/source/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1527815339758},{"_id":"themes/material/source/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1527815339759},{"_id":"themes/material/source/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1527815339760},{"_id":"themes/material/source/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1527815339761},{"_id":"themes/material/source/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1527815339762},{"_id":"themes/material/source/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1527815339763},{"_id":"themes/material/source/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1527815339764},{"_id":"themes/material/source/js/gallery/gallery.js","hash":"79688611831faca31d5ef0c6d90397c29781fa98","modified":1527815339766},{"_id":"themes/material/layout/_widget/comment/livere/common.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527815339683},{"_id":"themes/material/layout/_widget/comment/valine/common.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527815339684},{"_id":"themes/material/source/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1527815339753},{"_id":"themes/material/source/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1527815339754},{"_id":"themes/material/source/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1527815339756},{"_id":"themes/material/source/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1527815339757},{"_id":"themes/material/source/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1527815339756},{"_id":"themes/material/source/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1527815339758},{"_id":"themes/material/source/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1527815339759},{"_id":"themes/material/source/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1527815339760},{"_id":"themes/material/source/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1527815339761},{"_id":"themes/material/source/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1527815339762},{"_id":"themes/material/.git/logs/refs/heads/master","hash":"2ea4b7954cc32c24d7226ef945a9f7087323f1e4","modified":1527815339662},{"_id":"themes/material/.git/objects/pack/pack-605205b4180dfe99d462a8015e82564b7970d38d.idx","hash":"62cf808c95d1696bce5c2cd31379f4a01dedc987","modified":1527815339561},{"_id":"themes/material/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1527815339659},{"_id":"themes/material/layout/_widget/comment/changyan/common.ejs","hash":"49f6580a358c75d152ec98c3e064e202ca188528","modified":1527815339681},{"_id":"themes/material/layout/_widget/comment/changyan/enter.ejs","hash":"f2728b174b12c3dc62b0199f540473ffb2a03ad8","modified":1527815339681},{"_id":"themes/material/layout/_widget/comment/changyan/main.ejs","hash":"720b1fd954577382ebdb60de6a93fb875843a9bb","modified":1527815339681},{"_id":"themes/material/layout/_widget/comment/disqus/common.ejs","hash":"c3e8ce6eb296b9b23836beaaf08b04d5e4ae5c11","modified":1527815339682},{"_id":"themes/material/layout/_widget/comment/disqus/main.ejs","hash":"ec4f4fc80f6e51dc4bd9fc9b0978e06d6e21031e","modified":1527815339682},{"_id":"themes/material/layout/_widget/comment/disqus/enter.ejs","hash":"224fbc348041f239be46c332b6560285795f38b4","modified":1527815339682},{"_id":"themes/material/layout/_widget/comment/disqus_click/enter.ejs","hash":"2af0b1276184decab109496e359cb81733c3fa27","modified":1527815339682},{"_id":"themes/material/layout/_widget/comment/disqus_click/common.ejs","hash":"83605554328fc4456b88452247a4ba26b42bdcad","modified":1527815339682},{"_id":"themes/material/layout/_widget/comment/disqus_click/main.ejs","hash":"714747721d35f158938473cf167b32825b584596","modified":1527815339682},{"_id":"themes/material/layout/_widget/comment/gitalk/common.ejs","hash":"f739897518011e1b3de7807c8c5d734984711282","modified":1527815339682},{"_id":"themes/material/layout/_widget/comment/gitalk/enter.ejs","hash":"f97cc3c2c75233ad553efd0467e3fb03d77884a8","modified":1527815339682},{"_id":"themes/material/layout/_widget/comment/gitalk/main.ejs","hash":"5ac18e3c74d560ae69e7b7e760055bd56b158467","modified":1527815339683},{"_id":"themes/material/layout/_widget/comment/gitment/common.ejs","hash":"9c6c8d1b448c32afb01c2d0351e87f4d4a17ec3c","modified":1527815339683},{"_id":"themes/material/layout/_widget/comment/gitment/main.ejs","hash":"ee74d328df06d16538e3be5e3f1d91073bcd2b9a","modified":1527815339683},{"_id":"themes/material/layout/_widget/comment/livere/enter.ejs","hash":"f780cfa631441eeeaa13c456c4a0fcc27668cc15","modified":1527815339684},{"_id":"themes/material/layout/_widget/comment/gitment/enter.ejs","hash":"dac4f440a5d102e4e808a26567296963f0801544","modified":1527815339683},{"_id":"themes/material/layout/_widget/comment/livere/main.ejs","hash":"056524394aeb5ad413ddb695b53296d985f48cc4","modified":1527815339684},{"_id":"themes/material/layout/_widget/comment/valine/enter.ejs","hash":"ab528aad46237d9e7f1c5b4b2b310dd628b2de63","modified":1527815339684},{"_id":"themes/material/layout/_widget/comment/valine/main.ejs","hash":"3d5d8559e6ad4ffb58a61d96439b2718eb9999b6","modified":1527815339684},{"_id":"themes/material/.git/logs/refs/remotes/origin/HEAD","hash":"2ea4b7954cc32c24d7226ef945a9f7087323f1e4","modified":1527815339659},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1527815339743},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1527815339712},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1527815339718},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1527815339722},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1527815339727},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1527815339732},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1527815339738},{"_id":"themes/material/source/img/bg.png","hash":"7ac6fa02bc679c21e07c2a0ad6e3fa891edd1fba","modified":1522813079834},{"_id":"themes/material/.git/objects/pack/pack-605205b4180dfe99d462a8015e82564b7970d38d.pack","hash":"2fb8c22ee1c2e3fc32163e06466846dca073bf89","modified":1527815339606},{"_id":"public/2018/06/13/协程-gevent/index.html","hash":"4847e75389791ba7d9ebc423d1320b7a65efeb1f","modified":1529313030694},{"_id":"public/2018/06/04/理解Python装饰器/index.html","hash":"744d4ee68ace97e4642ffae9573cbee838c3467b","modified":1529313030710},{"_id":"public/2018/06/04/Python-metaclass研究/index.html","hash":"cc1e16e0ad3c8964dff3926ce758bbc1ff93b00a","modified":1529313030710},{"_id":"public/2018/06/01/Python下划线命名含义/index.html","hash":"988996e0674eee3b63bcca3134a6a1e72273add4","modified":1529313030710},{"_id":"public/categories/Python/index.html","hash":"8e026af9f623849112da0f61071c7115b1b79461","modified":1529313030710},{"_id":"public/categories/Python/函数式编程/index.html","hash":"45e84e90ce3dad46bcac5ead40e0cbbb74047498","modified":1529313030710},{"_id":"public/categories/Python/面向对象/index.html","hash":"c748310f31d377df069d5c9755f32e6da1eaa559","modified":1529313030710},{"_id":"public/categories/Python/多线程/index.html","hash":"4033767c742c05a4cb6636788ccdb6dc042f44f6","modified":1529313030710},{"_id":"public/categories/Python/多线程/协程/index.html","hash":"9674ea47f8c9f0ff22222525d06d279acde628c2","modified":1529313030710},{"_id":"public/archives/index.html","hash":"8f316064640ab3f2ec85dd6b0f8bfce6a3e54d80","modified":1529313030710},{"_id":"public/archives/2018/index.html","hash":"182e91b4ac30ad85973cb85422a46c468e9da574","modified":1529313030710},{"_id":"public/archives/2018/06/index.html","hash":"1187b5987958cb8b1c4ecad768ea73bca47cd739","modified":1529313030710},{"_id":"public/index.html","hash":"7ef67bea32c467429b6bb012f8b21ba6a900b007","modified":1529313030741},{"_id":"public/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1529313030741},{"_id":"public/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1529313030741},{"_id":"public/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1529313030741},{"_id":"public/img/favicon.png","hash":"b08658a08e5e0357e8e5dab9324667704159c7a7","modified":1529313030741},{"_id":"public/img/logo.png","hash":"ef16360fc6b68e28c2cf78f7c7d589a39be78279","modified":1529313030741},{"_id":"public/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1529313030741},{"_id":"public/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1529313030741},{"_id":"public/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1529313030741},{"_id":"public/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1529313030741},{"_id":"public/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1529313030741},{"_id":"public/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1529313030741},{"_id":"public/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1529313030741},{"_id":"public/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1529313030741},{"_id":"public/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1529313030741},{"_id":"public/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1529313030741},{"_id":"public/img/footer/footer_ico-v2ex.svg","hash":"90c5a53a27ba7cceeedbaffef9ce829abb1815c6","modified":1529313030741},{"_id":"public/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1529313030741},{"_id":"public/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1529313030741},{"_id":"public/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1529313030741},{"_id":"public/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1529313030741},{"_id":"public/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1529313030741},{"_id":"public/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1529313030741},{"_id":"public/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1529313030741},{"_id":"public/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1529313030741},{"_id":"public/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1529313030741},{"_id":"public/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1529313030741},{"_id":"public/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1529313030741},{"_id":"public/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1529313030741},{"_id":"public/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1529313030741},{"_id":"public/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1529313030741},{"_id":"public/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1529313030741},{"_id":"public/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1529313030741},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1529313030757},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1529313030757},{"_id":"public/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1529313030757},{"_id":"public/img/avatar.png","hash":"625183dc4ec8265fadd94aee2bbff130fe230b32","modified":1529313030757},{"_id":"public/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1529313030757},{"_id":"public/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1529313030757},{"_id":"public/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1529313030757},{"_id":"public/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1529313030757},{"_id":"public/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1529313030757},{"_id":"public/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1529313030757},{"_id":"public/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1529313030757},{"_id":"public/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1529313030757},{"_id":"public/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1529313030757},{"_id":"public/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1529313030757},{"_id":"public/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1529313030757},{"_id":"public/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1529313030757},{"_id":"public/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1529313030757},{"_id":"public/css/prettify.css","hash":"c395f20ee64e80c2b6b15c7dade02f9aaaeab2c8","modified":1529313030757},{"_id":"public/css/prettify.min.css","hash":"62edd8f08656463b0e077dcf893faa3cc8eb5fe4","modified":1529313030757},{"_id":"public/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1529313030757},{"_id":"public/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1529313030757},{"_id":"public/js/hanabi-browser-bundle.js","hash":"d646647bda386140c8315d60e3ff4ddbdb15c1ea","modified":1529313030757},{"_id":"public/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1529313030757},{"_id":"public/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1529313030757},{"_id":"public/js/lsloader.js","hash":"2b14e57784fb6b5f58d71584189c61af45f393e8","modified":1529313030757},{"_id":"public/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1529313030757},{"_id":"public/js/lsloader.min.js","hash":"1a68a8d267948ea8475245b7d365a1a1bd8f732e","modified":1529313030757},{"_id":"public/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1529313030757},{"_id":"public/js/prettify.min.js","hash":"69908fe0a09cee107c25cb5d769b861723e7b7bb","modified":1529313030757},{"_id":"public/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1529313030757},{"_id":"public/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1529313030757},{"_id":"public/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1529313030757},{"_id":"public/css/prettify/atelier-cave-dark.min.css","hash":"cb0156cdc36500a26b232ae1c81fdc880eba85e7","modified":1529313030757},{"_id":"public/css/prettify/atelier-dune-dark.min.css","hash":"c5094d99ca0e619d97860c88211bf908fdf830b1","modified":1529313030757},{"_id":"public/css/prettify/atelier-dune-light.min.css","hash":"b3ad98483e4d5bde72d52a15423d98e0d086db09","modified":1529313030757},{"_id":"public/css/prettify/atelier-cave-light.min.css","hash":"4b62dc45aa351b071d6a434dc54fe8c2e15c85cc","modified":1529313030757},{"_id":"public/css/prettify/atelier-estuary-light.min.css","hash":"1d12d8f7fa9c122a186ee76fdf681c191a68f104","modified":1529313030757},{"_id":"public/css/prettify/atelier-estuary-dark.min.css","hash":"7e3a065cafeb3acc1d7178f64ef4265f5d5ad2b9","modified":1529313030757},{"_id":"public/css/prettify/atelier-forest-dark.min.css","hash":"9296b851a5b66785a60afa5da5fe9080bda96bf5","modified":1529313030757},{"_id":"public/css/prettify/atelier-forest-light.min.css","hash":"3532f6e86bf4afbba05f7a074b791b73174f9622","modified":1529313030757},{"_id":"public/css/prettify/atelier-heath-dark.min.css","hash":"954309acd7918422382a3ff2f9c2988aec0ff956","modified":1529313030757},{"_id":"public/css/prettify/atelier-lakeside-dark.min.css","hash":"18575fc6dff855e395a39d0383d2f18807091f0d","modified":1529313030757},{"_id":"public/css/prettify/atelier-lakeside-light.min.css","hash":"e20e8ac64432fa1aa6f74792b58196af7cf79c12","modified":1529313030757},{"_id":"public/css/prettify/atelier-heath-light.min.css","hash":"a67199fa580b3aa2df031e5d2028929d29ca3b45","modified":1529313030757},{"_id":"public/css/prettify/atelier-plateau-dark.min.css","hash":"137e3c499a720da3c1d57b4dc53264b1d623e1c5","modified":1529313030757},{"_id":"public/css/prettify/atelier-plateau-light.min.css","hash":"153801640fdcbb74c0de3f15345110f2210eb991","modified":1529313030757},{"_id":"public/css/prettify/atelier-savanna-light.min.css","hash":"d9425ffb7c60d646190c22b9a5f72091ee5f9ace","modified":1529313030757},{"_id":"public/css/prettify/atelier-seaside-dark.min.css","hash":"e0e6bbacc75a349b1e49c236d374b0e42f1fd485","modified":1529313030757},{"_id":"public/css/prettify/atelier-savanna-dark.min.css","hash":"fba92c652fd6704422b8f2bbc11706805a6faed0","modified":1529313030757},{"_id":"public/css/prettify/atelier-seaside-light.min.css","hash":"732750b75389c1c49204f37705e6abeee40ce64f","modified":1529313030757},{"_id":"public/css/prettify/atelier-sulphurpool-dark.min.css","hash":"015a35dddaee153fa8bb71d7f3818a6ba4d120d8","modified":1529313030757},{"_id":"public/css/prettify/atelier-sulphurpool-light.min.css","hash":"ab1a6200eab648cab443c3df77fde9b237ef27b6","modified":1529313030757},{"_id":"public/css/prettify/github-v2.min.css","hash":"57630621d20842a529bdea7b17fc90f520e562ef","modified":1529313030757},{"_id":"public/css/prettify/github.min.css","hash":"19cf828225288fa5c006f1d8f66c39d11f4ef7f2","modified":1529313030757},{"_id":"public/css/prettify/hemisu-dark.min.css","hash":"a671248cfd573292026d2174817e82e593691052","modified":1529313030757},{"_id":"public/css/prettify/hemisu-light.min.css","hash":"b2556ff41e513fd13d032ec84a37ee260a905815","modified":1529313030757},{"_id":"public/css/prettify/tomorrow-night-bright.min.css","hash":"cf251fd3edfd736695272a0f1b41d509b7bb1fb9","modified":1529313030757},{"_id":"public/css/prettify/tomorrow-night-blue.min.css","hash":"c442728d96485bcf816151fe6bd96993aae09852","modified":1529313030757},{"_id":"public/css/prettify/tomorrow-night-eighties.min.css","hash":"6ce259d674bb4edda23eea32b2379be17d0e0e6e","modified":1529313030757},{"_id":"public/css/prettify/tomorrow-night.min.css","hash":"d989206d124035494acb4b0cdc7fbc89f3b7d108","modified":1529313030757},{"_id":"public/css/prettify/tomorrow.min.css","hash":"b2c6d610b77f0273fefab5aa4ad26a7f58956f87","modified":1529313030757},{"_id":"public/css/prettify/vibrant-ink.min.css","hash":"c265bac6c31cf622b536b29c8a6bc46955d6fe63","modified":1529313030757},{"_id":"public/css/prettify/tranquil-heart.min.css","hash":"0f6eefbdda8e410832e9c516a5dd19899217ef06","modified":1529313030757},{"_id":"public/css/disqus-proxy.css","hash":"d5086cda8aaae20b8d3f9dd50f0be5ccb717e42a","modified":1529313030757},{"_id":"public/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1529313030757},{"_id":"public/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1529313030757},{"_id":"public/css/material-icons.css","hash":"f6f95fe5190f3c65931847246621fb83754eb00c","modified":1529313030757},{"_id":"public/js/Valine.min.js","hash":"6a287a99a772a0ea8f98b133523429c9250cc67f","modified":1529313030757},{"_id":"public/js/MathJax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1529313030757},{"_id":"public/css/material.css","hash":"068e2b00f686157b6e8b78b9b808112adbedf4de","modified":1529313030757},{"_id":"public/css/material.min.css","hash":"1a19febb9214ab689b02f5bb8ccb23579e6c1181","modified":1529313030757},{"_id":"public/css/style.min.css","hash":"a9e9b33e1fcf818f08a04b909c86f2460a05f060","modified":1529313030757},{"_id":"public/css/style.css","hash":"a2f27c40f412dc24e1ed5f62a4117523a226eed0","modified":1529313030757},{"_id":"public/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1529313030757},{"_id":"public/js/js.min.js","hash":"709d347d3be033b841de0493b7cf532b594bb1f6","modified":1529313030757},{"_id":"public/js/js.js","hash":"64b3f20e7138674ecf21e6e3982565ea63feae26","modified":1529313030757},{"_id":"public/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1529313030757},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1529313030757},{"_id":"public/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1529313030757},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1529313030757},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1529313030757},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1529313030804},{"_id":"public/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1529313030804},{"_id":"public/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1529313030804},{"_id":"public/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1529313030804},{"_id":"public/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1529313030804},{"_id":"public/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1529313030804},{"_id":"public/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1529313030819},{"_id":"public/img/bg.png","hash":"7ac6fa02bc679c21e07c2a0ad6e3fa891edd1fba","modified":1529313030850}],"Category":[{"name":"Python","_id":"cjik1hq900002egdm56elp9do"},{"name":"函数式编程","parent":"cjik1hq900002egdm56elp9do","_id":"cjik1hq9f0007egdmkyt1flvc"},{"name":"面向对象","parent":"cjik1hq900002egdm56elp9do","_id":"cjik1hq9f0009egdml2i4u9ji"},{"name":"多线程","parent":"cjik1hq900002egdm56elp9do","_id":"cjik1hq9f000begdm70yvc4bk"},{"name":"协程","parent":"cjik1hq9f000begdm70yvc4bk","_id":"cjik1hq9f000fegdmrx5ubxsn"}],"Data":[],"Page":[],"Post":[{"title":"Python metaclass研究","date":"2018-06-04T01:51:02.000Z","_content":"\n## 1. class is object\n在绝大多数程序设计语言中，类是一种对象的抽象表达，Python自然也不例外:\n```\nclass SimpleClass:\n    pass\n\nobj = SimpleClass()\nprint(obj)\n```\n上述代码执行后会将类的模块名，类名以及在内存中的地址打印出来，如下:\n```\n<__main__.SimpleClass object at 0x0000000005C95BA8>\n```\n不过在Python中，类本身也是一种对象，在上述代码定义好`SimpleClass`类后，我们可以试着将`SimpleClass`本身打印出来\n```\nprint(SimpleClass)\n# [Out] <class '__main__.SimpleClass'>\n```\n也就是说，当执行完`SimpleClass`的定义代码后，解释器会在内存中创建一个新的对象，名为`SimpleClass`。当然，由于类本身也是一种对象，自然对类的种种操作:赋值给变量，添加属性，作为参数传递\n```\ndef func_print(arg):\n    print(arg)\n\nfunc_print(SimpleClass)\n# [Out] <class '__main__.SimpleClass'>\n\nprint(hasattr(SimpleClass, 'attr'))\n# [Out] False\n\nSimpleClass.attr = 'value'\nprint(hasattr(SimpleClass, 'attr'))\n# [Out] True\nprint(SimpleClass.attr)\n# [Out] value\n\nclass_ = SimpleClass\nprint(class_)\n# [Out] <class '__main__.SimpleClass'>\n\nprint(class_())\n# [Out] <__main__.SimpleClass object at 0x0000000005CC7EF0>\n```\n\n## 2. type()\nPython内置函数type通常会用来判断传入的参数的类型，如:\n```\ntype(1)\n# [Out] int\n\ntype('abc')\n# [Out] str\n\ndef func():\n    print(\"Hello\")\n\ntype(func)\n# [Out] function\n\ns = SimpleClass()\ntype(s)\n# [Out] __main__.SimpleClass\n\ntype(SimpleClass)\n# [Out] type\n\nprint(type)\n# [Out] <class 'type'>\n```\n从最后两段代码的执行结果可以看到，Python中**类**的**类型**是`type`,`type`也是一种类。而`type`的语法为\n```\ntype(name, bases, dict)\n```\n其中`bases`和`dict`都不是必选参数，其中`bases`是一个tuple，表示该类继承哪些类，`dict`是成员变量的映射关系。在只有一个参数的时候，`type`会返回传入的参数的类型，在有两个以上参数时，会创建一个新的类，也就是说:\n```\nclass A:\n    a = 1\n    def func(self, n):\n        print(self.a*n)\n```\n和\n```\nA = type('A', (object,), dict(a = 1, func = lambda self,n:print(self.a*n)))\n```\n这两段代码是等价的，任取其中一段都能创建一个新的类A，可以用这个类A来创建对象。利用`type`，可以在代码运行期间动态创建类。\n\n## 3. metaclass\nmetaclass可以控制类的创建行为，参照下述代码:\n```\nclass ListMetaclass(type):\n    def __new__(cls, name, bases, attrs):\n        attrs['add'] = lambda self, value:self.append(value)\n        return type.__new__(cls, name, bases, attrs)\n\nclass MyList(list, metaclass = ListMetaclass):\n    pass\n\nmy_l = MyList()\nmy_l.add(1)\nprint(my_l)\n# [Out] [1]\n\nl = list()\nl.add(1)\n# [Out] \n#---------------------------------------------------------------------------\n#AttributeError                            Traceback #(most recent call last)\n#<ipython-input-59-001a7ae7d652> in <module>()\n#----> 1 l.add(1)\n#\n#AttributeError: 'list' object has no attribute 'add'\n```\n从结果来看，定义`ListMetaclass`，然后在定义`MyList`时继承`list`类，并指定`metaclass`为`ListMetaclass`;接着创建`MyList`的实例`my_l`，并调用`add`函数添加一个新的对象;然后再创建`list`的实例`l`，并调用`add`函数，结果抛出`AttributeError`异常。\n\n重头看一下整个代码，在一开始定义`ListMetaclass`的时候，定义了`__new__`函数\n```\ndef __new__(cls, name, bases, attrs):\n    attrs['add'] = lambda self, value: self.append(value)\n    return type.__new__(cls, name, bases, attrs)\n```\n其中，`cls`是当前准备创建类的对象，`name`是类的名字，`bases`是类继承的父类的tuple，`attrs`是类的成员映射。\n当我们定义(创建)`MyList`类时，会通过`ListMetaclass.__new__()`进行创建，在这个函数中，我们可以对类的定义进行修改，比如添加自定义函数`add`等，之后在调用`type`创建类并将其返回。\n\n看起来有一点混乱?现在来理一下使用`metaclass`动态创建类并操作类的创建行为的流程\n```\n定义class\n    |__指定metaclass\n        |__调用metaclass.__new__\n            |__完成metaclass的动作，返回新的类\n```\n\n## 4. 单例模式的实现\n这种动态创建类的特性，在绝大多数情况下并不会用到，因为在很多场景下并不需要我们实现动态创建类的功能。不过，在很多框架里面却会反复用到这样的特性，比如说ORM(对象-关系映射);也可以利用这样的特性实现单例模式，具体参照如下代码:\n```\nclass SingleTon(type):\n    def __init__(self, *args, **kwargs):\n        self._ins = None\n        super(SingleTon, self).__init__(*args, **kwargs)\n\n    def __call__(self, *args, **kwargs):\n        if self._ins is None:\n            self._ins = super(SingleTon, self).__call__(*args, **kwargs)\n        return self._ins\n\nclass Any(metaclass = SingleTon):\n    any_value = 1\n\na = Any()\nb = Any()\n\nprint(id(a))\n# [Out] 19184944\nprint(id(b))\n# [Out] 19184944\n```\n上述代码便实现了单例模式，在第一次创建`Any`的实例`a`时，创建了新的对象，id为19184944，在第二次创建`Any`的实例`b`时，由于已经存在了实例`a`，便直接将实例`a`返回，所以此时`a`和`b`是指向同一个实例的不同的变量名。在这里可能会产生疑问:为什么在定义`SingleTon`类时，在`__call__`函数中进行了是否存在实例的判断，而不是用`__new__`函数?因为，metaclass是用来创建**类本身**，而不是用来创建**类构造的对象**的，这意味着`__new__`函数只会在解释器读取完`Any`类并将其创建的时候执行一次。在`__call__`被调用时，`self`就是类，形如`Any()`这样的代码会调用到`__call__`函数，在类`Any`看来，`__call__`中的`self`就是`<class '__main__.Any'>`，所以创建两个`Any`的实例，`__call__`就会被调用两次，所以，在`__call__`中对`self`操作，添加新的属性`_ins`用来保存一个`Any`的实例，并在每次构造是判断是否存在该实例来决定是否创建新的实例。\n\n当然，使用`__new__`函数也能实现单例模式，不过在这里就应该在需要实现单例模式的类中重写`__new__`函数，参考代码如下:\n```\nclass SingleTon:\n    def __new__(cls, name, bases, attrs):\n        if not hasattr(cls, '_ins'):\n            cls._ins = super(SingleTon, cls).__new__(cls, name, bases, attrs)\n        return cls._ins\n\na = SingleTon()\nb = SingleTon()\nprint(id(a))\n# [Out] 12696264\nprint(id(b))\n# [Out] 12696264\n```\n如有不足之处，欢迎指正。\n","source":"_posts/Python-metaclass研究.md","raw":"---\ntitle: Python metaclass研究\ndate: 2018-06-04 09:51:02\ntags:\ncategory: \n- Python\n- 面向对象\n---\n\n## 1. class is object\n在绝大多数程序设计语言中，类是一种对象的抽象表达，Python自然也不例外:\n```\nclass SimpleClass:\n    pass\n\nobj = SimpleClass()\nprint(obj)\n```\n上述代码执行后会将类的模块名，类名以及在内存中的地址打印出来，如下:\n```\n<__main__.SimpleClass object at 0x0000000005C95BA8>\n```\n不过在Python中，类本身也是一种对象，在上述代码定义好`SimpleClass`类后，我们可以试着将`SimpleClass`本身打印出来\n```\nprint(SimpleClass)\n# [Out] <class '__main__.SimpleClass'>\n```\n也就是说，当执行完`SimpleClass`的定义代码后，解释器会在内存中创建一个新的对象，名为`SimpleClass`。当然，由于类本身也是一种对象，自然对类的种种操作:赋值给变量，添加属性，作为参数传递\n```\ndef func_print(arg):\n    print(arg)\n\nfunc_print(SimpleClass)\n# [Out] <class '__main__.SimpleClass'>\n\nprint(hasattr(SimpleClass, 'attr'))\n# [Out] False\n\nSimpleClass.attr = 'value'\nprint(hasattr(SimpleClass, 'attr'))\n# [Out] True\nprint(SimpleClass.attr)\n# [Out] value\n\nclass_ = SimpleClass\nprint(class_)\n# [Out] <class '__main__.SimpleClass'>\n\nprint(class_())\n# [Out] <__main__.SimpleClass object at 0x0000000005CC7EF0>\n```\n\n## 2. type()\nPython内置函数type通常会用来判断传入的参数的类型，如:\n```\ntype(1)\n# [Out] int\n\ntype('abc')\n# [Out] str\n\ndef func():\n    print(\"Hello\")\n\ntype(func)\n# [Out] function\n\ns = SimpleClass()\ntype(s)\n# [Out] __main__.SimpleClass\n\ntype(SimpleClass)\n# [Out] type\n\nprint(type)\n# [Out] <class 'type'>\n```\n从最后两段代码的执行结果可以看到，Python中**类**的**类型**是`type`,`type`也是一种类。而`type`的语法为\n```\ntype(name, bases, dict)\n```\n其中`bases`和`dict`都不是必选参数，其中`bases`是一个tuple，表示该类继承哪些类，`dict`是成员变量的映射关系。在只有一个参数的时候，`type`会返回传入的参数的类型，在有两个以上参数时，会创建一个新的类，也就是说:\n```\nclass A:\n    a = 1\n    def func(self, n):\n        print(self.a*n)\n```\n和\n```\nA = type('A', (object,), dict(a = 1, func = lambda self,n:print(self.a*n)))\n```\n这两段代码是等价的，任取其中一段都能创建一个新的类A，可以用这个类A来创建对象。利用`type`，可以在代码运行期间动态创建类。\n\n## 3. metaclass\nmetaclass可以控制类的创建行为，参照下述代码:\n```\nclass ListMetaclass(type):\n    def __new__(cls, name, bases, attrs):\n        attrs['add'] = lambda self, value:self.append(value)\n        return type.__new__(cls, name, bases, attrs)\n\nclass MyList(list, metaclass = ListMetaclass):\n    pass\n\nmy_l = MyList()\nmy_l.add(1)\nprint(my_l)\n# [Out] [1]\n\nl = list()\nl.add(1)\n# [Out] \n#---------------------------------------------------------------------------\n#AttributeError                            Traceback #(most recent call last)\n#<ipython-input-59-001a7ae7d652> in <module>()\n#----> 1 l.add(1)\n#\n#AttributeError: 'list' object has no attribute 'add'\n```\n从结果来看，定义`ListMetaclass`，然后在定义`MyList`时继承`list`类，并指定`metaclass`为`ListMetaclass`;接着创建`MyList`的实例`my_l`，并调用`add`函数添加一个新的对象;然后再创建`list`的实例`l`，并调用`add`函数，结果抛出`AttributeError`异常。\n\n重头看一下整个代码，在一开始定义`ListMetaclass`的时候，定义了`__new__`函数\n```\ndef __new__(cls, name, bases, attrs):\n    attrs['add'] = lambda self, value: self.append(value)\n    return type.__new__(cls, name, bases, attrs)\n```\n其中，`cls`是当前准备创建类的对象，`name`是类的名字，`bases`是类继承的父类的tuple，`attrs`是类的成员映射。\n当我们定义(创建)`MyList`类时，会通过`ListMetaclass.__new__()`进行创建，在这个函数中，我们可以对类的定义进行修改，比如添加自定义函数`add`等，之后在调用`type`创建类并将其返回。\n\n看起来有一点混乱?现在来理一下使用`metaclass`动态创建类并操作类的创建行为的流程\n```\n定义class\n    |__指定metaclass\n        |__调用metaclass.__new__\n            |__完成metaclass的动作，返回新的类\n```\n\n## 4. 单例模式的实现\n这种动态创建类的特性，在绝大多数情况下并不会用到，因为在很多场景下并不需要我们实现动态创建类的功能。不过，在很多框架里面却会反复用到这样的特性，比如说ORM(对象-关系映射);也可以利用这样的特性实现单例模式，具体参照如下代码:\n```\nclass SingleTon(type):\n    def __init__(self, *args, **kwargs):\n        self._ins = None\n        super(SingleTon, self).__init__(*args, **kwargs)\n\n    def __call__(self, *args, **kwargs):\n        if self._ins is None:\n            self._ins = super(SingleTon, self).__call__(*args, **kwargs)\n        return self._ins\n\nclass Any(metaclass = SingleTon):\n    any_value = 1\n\na = Any()\nb = Any()\n\nprint(id(a))\n# [Out] 19184944\nprint(id(b))\n# [Out] 19184944\n```\n上述代码便实现了单例模式，在第一次创建`Any`的实例`a`时，创建了新的对象，id为19184944，在第二次创建`Any`的实例`b`时，由于已经存在了实例`a`，便直接将实例`a`返回，所以此时`a`和`b`是指向同一个实例的不同的变量名。在这里可能会产生疑问:为什么在定义`SingleTon`类时，在`__call__`函数中进行了是否存在实例的判断，而不是用`__new__`函数?因为，metaclass是用来创建**类本身**，而不是用来创建**类构造的对象**的，这意味着`__new__`函数只会在解释器读取完`Any`类并将其创建的时候执行一次。在`__call__`被调用时，`self`就是类，形如`Any()`这样的代码会调用到`__call__`函数，在类`Any`看来，`__call__`中的`self`就是`<class '__main__.Any'>`，所以创建两个`Any`的实例，`__call__`就会被调用两次，所以，在`__call__`中对`self`操作，添加新的属性`_ins`用来保存一个`Any`的实例，并在每次构造是判断是否存在该实例来决定是否创建新的实例。\n\n当然，使用`__new__`函数也能实现单例模式，不过在这里就应该在需要实现单例模式的类中重写`__new__`函数，参考代码如下:\n```\nclass SingleTon:\n    def __new__(cls, name, bases, attrs):\n        if not hasattr(cls, '_ins'):\n            cls._ins = super(SingleTon, cls).__new__(cls, name, bases, attrs)\n        return cls._ins\n\na = SingleTon()\nb = SingleTon()\nprint(id(a))\n# [Out] 12696264\nprint(id(b))\n# [Out] 12696264\n```\n如有不足之处，欢迎指正。\n","slug":"Python-metaclass研究","published":1,"updated":"2018-06-04T03:21:14.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjik1hq900000egdmoc4821xs","content":"<h2 id=\"1-class-is-object\"><a href=\"#1-class-is-object\" class=\"headerlink\" title=\"1. class is object\"></a>1. class is object</h2><p>在绝大多数程序设计语言中，类是一种对象的抽象表达，Python自然也不例外:</p>\n<pre><code>class SimpleClass:\n    pass\n\nobj = SimpleClass()\nprint(obj)\n</code></pre><p>上述代码执行后会将类的模块名，类名以及在内存中的地址打印出来，如下:</p>\n<pre><code>&lt;__main__.SimpleClass object at 0x0000000005C95BA8&gt;\n</code></pre><p>不过在Python中，类本身也是一种对象，在上述代码定义好<code>SimpleClass</code>类后，我们可以试着将<code>SimpleClass</code>本身打印出来</p>\n<pre><code>print(SimpleClass)\n# [Out] &lt;class &#39;__main__.SimpleClass&#39;&gt;\n</code></pre><p>也就是说，当执行完<code>SimpleClass</code>的定义代码后，解释器会在内存中创建一个新的对象，名为<code>SimpleClass</code>。当然，由于类本身也是一种对象，自然对类的种种操作:赋值给变量，添加属性，作为参数传递</p>\n<pre><code>def func_print(arg):\n    print(arg)\n\nfunc_print(SimpleClass)\n# [Out] &lt;class &#39;__main__.SimpleClass&#39;&gt;\n\nprint(hasattr(SimpleClass, &#39;attr&#39;))\n# [Out] False\n\nSimpleClass.attr = &#39;value&#39;\nprint(hasattr(SimpleClass, &#39;attr&#39;))\n# [Out] True\nprint(SimpleClass.attr)\n# [Out] value\n\nclass_ = SimpleClass\nprint(class_)\n# [Out] &lt;class &#39;__main__.SimpleClass&#39;&gt;\n\nprint(class_())\n# [Out] &lt;__main__.SimpleClass object at 0x0000000005CC7EF0&gt;\n</code></pre><h2 id=\"2-type\"><a href=\"#2-type\" class=\"headerlink\" title=\"2. type()\"></a>2. type()</h2><p>Python内置函数type通常会用来判断传入的参数的类型，如:</p>\n<pre><code>type(1)\n# [Out] int\n\ntype(&#39;abc&#39;)\n# [Out] str\n\ndef func():\n    print(&quot;Hello&quot;)\n\ntype(func)\n# [Out] function\n\ns = SimpleClass()\ntype(s)\n# [Out] __main__.SimpleClass\n\ntype(SimpleClass)\n# [Out] type\n\nprint(type)\n# [Out] &lt;class &#39;type&#39;&gt;\n</code></pre><p>从最后两段代码的执行结果可以看到，Python中<strong>类</strong>的<strong>类型</strong>是<code>type</code>,<code>type</code>也是一种类。而<code>type</code>的语法为</p>\n<pre><code>type(name, bases, dict)\n</code></pre><p>其中<code>bases</code>和<code>dict</code>都不是必选参数，其中<code>bases</code>是一个tuple，表示该类继承哪些类，<code>dict</code>是成员变量的映射关系。在只有一个参数的时候，<code>type</code>会返回传入的参数的类型，在有两个以上参数时，会创建一个新的类，也就是说:</p>\n<pre><code>class A:\n    a = 1\n    def func(self, n):\n        print(self.a*n)\n</code></pre><p>和</p>\n<pre><code>A = type(&#39;A&#39;, (object,), dict(a = 1, func = lambda self,n:print(self.a*n)))\n</code></pre><p>这两段代码是等价的，任取其中一段都能创建一个新的类A，可以用这个类A来创建对象。利用<code>type</code>，可以在代码运行期间动态创建类。</p>\n<h2 id=\"3-metaclass\"><a href=\"#3-metaclass\" class=\"headerlink\" title=\"3. metaclass\"></a>3. metaclass</h2><p>metaclass可以控制类的创建行为，参照下述代码:</p>\n<pre><code>class ListMetaclass(type):\n    def __new__(cls, name, bases, attrs):\n        attrs[&#39;add&#39;] = lambda self, value:self.append(value)\n        return type.__new__(cls, name, bases, attrs)\n\nclass MyList(list, metaclass = ListMetaclass):\n    pass\n\nmy_l = MyList()\nmy_l.add(1)\nprint(my_l)\n# [Out] [1]\n\nl = list()\nl.add(1)\n# [Out] \n#---------------------------------------------------------------------------\n#AttributeError                            Traceback #(most recent call last)\n#&lt;ipython-input-59-001a7ae7d652&gt; in &lt;module&gt;()\n#----&gt; 1 l.add(1)\n#\n#AttributeError: &#39;list&#39; object has no attribute &#39;add&#39;\n</code></pre><p>从结果来看，定义<code>ListMetaclass</code>，然后在定义<code>MyList</code>时继承<code>list</code>类，并指定<code>metaclass</code>为<code>ListMetaclass</code>;接着创建<code>MyList</code>的实例<code>my_l</code>，并调用<code>add</code>函数添加一个新的对象;然后再创建<code>list</code>的实例<code>l</code>，并调用<code>add</code>函数，结果抛出<code>AttributeError</code>异常。</p>\n<p>重头看一下整个代码，在一开始定义<code>ListMetaclass</code>的时候，定义了<code>__new__</code>函数</p>\n<pre><code>def __new__(cls, name, bases, attrs):\n    attrs[&#39;add&#39;] = lambda self, value: self.append(value)\n    return type.__new__(cls, name, bases, attrs)\n</code></pre><p>其中，<code>cls</code>是当前准备创建类的对象，<code>name</code>是类的名字，<code>bases</code>是类继承的父类的tuple，<code>attrs</code>是类的成员映射。<br>当我们定义(创建)<code>MyList</code>类时，会通过<code>ListMetaclass.__new__()</code>进行创建，在这个函数中，我们可以对类的定义进行修改，比如添加自定义函数<code>add</code>等，之后在调用<code>type</code>创建类并将其返回。</p>\n<p>看起来有一点混乱?现在来理一下使用<code>metaclass</code>动态创建类并操作类的创建行为的流程</p>\n<pre><code>定义class\n    |__指定metaclass\n        |__调用metaclass.__new__\n            |__完成metaclass的动作，返回新的类\n</code></pre><h2 id=\"4-单例模式的实现\"><a href=\"#4-单例模式的实现\" class=\"headerlink\" title=\"4. 单例模式的实现\"></a>4. 单例模式的实现</h2><p>这种动态创建类的特性，在绝大多数情况下并不会用到，因为在很多场景下并不需要我们实现动态创建类的功能。不过，在很多框架里面却会反复用到这样的特性，比如说ORM(对象-关系映射);也可以利用这样的特性实现单例模式，具体参照如下代码:</p>\n<pre><code>class SingleTon(type):\n    def __init__(self, *args, **kwargs):\n        self._ins = None\n        super(SingleTon, self).__init__(*args, **kwargs)\n\n    def __call__(self, *args, **kwargs):\n        if self._ins is None:\n            self._ins = super(SingleTon, self).__call__(*args, **kwargs)\n        return self._ins\n\nclass Any(metaclass = SingleTon):\n    any_value = 1\n\na = Any()\nb = Any()\n\nprint(id(a))\n# [Out] 19184944\nprint(id(b))\n# [Out] 19184944\n</code></pre><p>上述代码便实现了单例模式，在第一次创建<code>Any</code>的实例<code>a</code>时，创建了新的对象，id为19184944，在第二次创建<code>Any</code>的实例<code>b</code>时，由于已经存在了实例<code>a</code>，便直接将实例<code>a</code>返回，所以此时<code>a</code>和<code>b</code>是指向同一个实例的不同的变量名。在这里可能会产生疑问:为什么在定义<code>SingleTon</code>类时，在<code>__call__</code>函数中进行了是否存在实例的判断，而不是用<code>__new__</code>函数?因为，metaclass是用来创建<strong>类本身</strong>，而不是用来创建<strong>类构造的对象</strong>的，这意味着<code>__new__</code>函数只会在解释器读取完<code>Any</code>类并将其创建的时候执行一次。在<code>__call__</code>被调用时，<code>self</code>就是类，形如<code>Any()</code>这样的代码会调用到<code>__call__</code>函数，在类<code>Any</code>看来，<code>__call__</code>中的<code>self</code>就是<code>&lt;class &#39;__main__.Any&#39;&gt;</code>，所以创建两个<code>Any</code>的实例，<code>__call__</code>就会被调用两次，所以，在<code>__call__</code>中对<code>self</code>操作，添加新的属性<code>_ins</code>用来保存一个<code>Any</code>的实例，并在每次构造是判断是否存在该实例来决定是否创建新的实例。</p>\n<p>当然，使用<code>__new__</code>函数也能实现单例模式，不过在这里就应该在需要实现单例模式的类中重写<code>__new__</code>函数，参考代码如下:</p>\n<pre><code>class SingleTon:\n    def __new__(cls, name, bases, attrs):\n        if not hasattr(cls, &#39;_ins&#39;):\n            cls._ins = super(SingleTon, cls).__new__(cls, name, bases, attrs)\n        return cls._ins\n\na = SingleTon()\nb = SingleTon()\nprint(id(a))\n# [Out] 12696264\nprint(id(b))\n# [Out] 12696264\n</code></pre><p>如有不足之处，欢迎指正。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-class-is-object\"><a href=\"#1-class-is-object\" class=\"headerlink\" title=\"1. class is object\"></a>1. class is object</h2><p>在绝大多数程序设计语言中，类是一种对象的抽象表达，Python自然也不例外:</p>\n<pre><code>class SimpleClass:\n    pass\n\nobj = SimpleClass()\nprint(obj)\n</code></pre><p>上述代码执行后会将类的模块名，类名以及在内存中的地址打印出来，如下:</p>\n<pre><code>&lt;__main__.SimpleClass object at 0x0000000005C95BA8&gt;\n</code></pre><p>不过在Python中，类本身也是一种对象，在上述代码定义好<code>SimpleClass</code>类后，我们可以试着将<code>SimpleClass</code>本身打印出来</p>\n<pre><code>print(SimpleClass)\n# [Out] &lt;class &#39;__main__.SimpleClass&#39;&gt;\n</code></pre><p>也就是说，当执行完<code>SimpleClass</code>的定义代码后，解释器会在内存中创建一个新的对象，名为<code>SimpleClass</code>。当然，由于类本身也是一种对象，自然对类的种种操作:赋值给变量，添加属性，作为参数传递</p>\n<pre><code>def func_print(arg):\n    print(arg)\n\nfunc_print(SimpleClass)\n# [Out] &lt;class &#39;__main__.SimpleClass&#39;&gt;\n\nprint(hasattr(SimpleClass, &#39;attr&#39;))\n# [Out] False\n\nSimpleClass.attr = &#39;value&#39;\nprint(hasattr(SimpleClass, &#39;attr&#39;))\n# [Out] True\nprint(SimpleClass.attr)\n# [Out] value\n\nclass_ = SimpleClass\nprint(class_)\n# [Out] &lt;class &#39;__main__.SimpleClass&#39;&gt;\n\nprint(class_())\n# [Out] &lt;__main__.SimpleClass object at 0x0000000005CC7EF0&gt;\n</code></pre><h2 id=\"2-type\"><a href=\"#2-type\" class=\"headerlink\" title=\"2. type()\"></a>2. type()</h2><p>Python内置函数type通常会用来判断传入的参数的类型，如:</p>\n<pre><code>type(1)\n# [Out] int\n\ntype(&#39;abc&#39;)\n# [Out] str\n\ndef func():\n    print(&quot;Hello&quot;)\n\ntype(func)\n# [Out] function\n\ns = SimpleClass()\ntype(s)\n# [Out] __main__.SimpleClass\n\ntype(SimpleClass)\n# [Out] type\n\nprint(type)\n# [Out] &lt;class &#39;type&#39;&gt;\n</code></pre><p>从最后两段代码的执行结果可以看到，Python中<strong>类</strong>的<strong>类型</strong>是<code>type</code>,<code>type</code>也是一种类。而<code>type</code>的语法为</p>\n<pre><code>type(name, bases, dict)\n</code></pre><p>其中<code>bases</code>和<code>dict</code>都不是必选参数，其中<code>bases</code>是一个tuple，表示该类继承哪些类，<code>dict</code>是成员变量的映射关系。在只有一个参数的时候，<code>type</code>会返回传入的参数的类型，在有两个以上参数时，会创建一个新的类，也就是说:</p>\n<pre><code>class A:\n    a = 1\n    def func(self, n):\n        print(self.a*n)\n</code></pre><p>和</p>\n<pre><code>A = type(&#39;A&#39;, (object,), dict(a = 1, func = lambda self,n:print(self.a*n)))\n</code></pre><p>这两段代码是等价的，任取其中一段都能创建一个新的类A，可以用这个类A来创建对象。利用<code>type</code>，可以在代码运行期间动态创建类。</p>\n<h2 id=\"3-metaclass\"><a href=\"#3-metaclass\" class=\"headerlink\" title=\"3. metaclass\"></a>3. metaclass</h2><p>metaclass可以控制类的创建行为，参照下述代码:</p>\n<pre><code>class ListMetaclass(type):\n    def __new__(cls, name, bases, attrs):\n        attrs[&#39;add&#39;] = lambda self, value:self.append(value)\n        return type.__new__(cls, name, bases, attrs)\n\nclass MyList(list, metaclass = ListMetaclass):\n    pass\n\nmy_l = MyList()\nmy_l.add(1)\nprint(my_l)\n# [Out] [1]\n\nl = list()\nl.add(1)\n# [Out] \n#---------------------------------------------------------------------------\n#AttributeError                            Traceback #(most recent call last)\n#&lt;ipython-input-59-001a7ae7d652&gt; in &lt;module&gt;()\n#----&gt; 1 l.add(1)\n#\n#AttributeError: &#39;list&#39; object has no attribute &#39;add&#39;\n</code></pre><p>从结果来看，定义<code>ListMetaclass</code>，然后在定义<code>MyList</code>时继承<code>list</code>类，并指定<code>metaclass</code>为<code>ListMetaclass</code>;接着创建<code>MyList</code>的实例<code>my_l</code>，并调用<code>add</code>函数添加一个新的对象;然后再创建<code>list</code>的实例<code>l</code>，并调用<code>add</code>函数，结果抛出<code>AttributeError</code>异常。</p>\n<p>重头看一下整个代码，在一开始定义<code>ListMetaclass</code>的时候，定义了<code>__new__</code>函数</p>\n<pre><code>def __new__(cls, name, bases, attrs):\n    attrs[&#39;add&#39;] = lambda self, value: self.append(value)\n    return type.__new__(cls, name, bases, attrs)\n</code></pre><p>其中，<code>cls</code>是当前准备创建类的对象，<code>name</code>是类的名字，<code>bases</code>是类继承的父类的tuple，<code>attrs</code>是类的成员映射。<br>当我们定义(创建)<code>MyList</code>类时，会通过<code>ListMetaclass.__new__()</code>进行创建，在这个函数中，我们可以对类的定义进行修改，比如添加自定义函数<code>add</code>等，之后在调用<code>type</code>创建类并将其返回。</p>\n<p>看起来有一点混乱?现在来理一下使用<code>metaclass</code>动态创建类并操作类的创建行为的流程</p>\n<pre><code>定义class\n    |__指定metaclass\n        |__调用metaclass.__new__\n            |__完成metaclass的动作，返回新的类\n</code></pre><h2 id=\"4-单例模式的实现\"><a href=\"#4-单例模式的实现\" class=\"headerlink\" title=\"4. 单例模式的实现\"></a>4. 单例模式的实现</h2><p>这种动态创建类的特性，在绝大多数情况下并不会用到，因为在很多场景下并不需要我们实现动态创建类的功能。不过，在很多框架里面却会反复用到这样的特性，比如说ORM(对象-关系映射);也可以利用这样的特性实现单例模式，具体参照如下代码:</p>\n<pre><code>class SingleTon(type):\n    def __init__(self, *args, **kwargs):\n        self._ins = None\n        super(SingleTon, self).__init__(*args, **kwargs)\n\n    def __call__(self, *args, **kwargs):\n        if self._ins is None:\n            self._ins = super(SingleTon, self).__call__(*args, **kwargs)\n        return self._ins\n\nclass Any(metaclass = SingleTon):\n    any_value = 1\n\na = Any()\nb = Any()\n\nprint(id(a))\n# [Out] 19184944\nprint(id(b))\n# [Out] 19184944\n</code></pre><p>上述代码便实现了单例模式，在第一次创建<code>Any</code>的实例<code>a</code>时，创建了新的对象，id为19184944，在第二次创建<code>Any</code>的实例<code>b</code>时，由于已经存在了实例<code>a</code>，便直接将实例<code>a</code>返回，所以此时<code>a</code>和<code>b</code>是指向同一个实例的不同的变量名。在这里可能会产生疑问:为什么在定义<code>SingleTon</code>类时，在<code>__call__</code>函数中进行了是否存在实例的判断，而不是用<code>__new__</code>函数?因为，metaclass是用来创建<strong>类本身</strong>，而不是用来创建<strong>类构造的对象</strong>的，这意味着<code>__new__</code>函数只会在解释器读取完<code>Any</code>类并将其创建的时候执行一次。在<code>__call__</code>被调用时，<code>self</code>就是类，形如<code>Any()</code>这样的代码会调用到<code>__call__</code>函数，在类<code>Any</code>看来，<code>__call__</code>中的<code>self</code>就是<code>&lt;class &#39;__main__.Any&#39;&gt;</code>，所以创建两个<code>Any</code>的实例，<code>__call__</code>就会被调用两次，所以，在<code>__call__</code>中对<code>self</code>操作，添加新的属性<code>_ins</code>用来保存一个<code>Any</code>的实例，并在每次构造是判断是否存在该实例来决定是否创建新的实例。</p>\n<p>当然，使用<code>__new__</code>函数也能实现单例模式，不过在这里就应该在需要实现单例模式的类中重写<code>__new__</code>函数，参考代码如下:</p>\n<pre><code>class SingleTon:\n    def __new__(cls, name, bases, attrs):\n        if not hasattr(cls, &#39;_ins&#39;):\n            cls._ins = super(SingleTon, cls).__new__(cls, name, bases, attrs)\n        return cls._ins\n\na = SingleTon()\nb = SingleTon()\nprint(id(a))\n# [Out] 12696264\nprint(id(b))\n# [Out] 12696264\n</code></pre><p>如有不足之处，欢迎指正。</p>\n"},{"title":"Python下划线命名含义","date":"2018-06-01T07:09:25.000Z","_content":"\n在使用Python定义类时通常会看到如下几种命名方式:\n\n1. 以字母开头的变量, 如`a`, `b`, `c`\n2. 以单个下划线开头的变量, 如`_f`, `_g`\n3. 以单个下划线结尾的变量, 如`p_`\n4. 以两个下划线开头的变量, 如`__x`, `__y`\n5. 以两个下划线开头和结尾的变量, 如`__init__`, `__del__`等等\n\n这些命名规范有些在解释器中具有特殊含义，有些则是一种通用的非强制性规范。\n\n#### 1. 以字母开头的变量\n这一类变量在各种程序设计语言中都存在，从代码可读性来考虑，应当具有直观的含义，在学校的时候就经常会被要求减少使用a,b,c,i,j,k等在大多场景下不具备含义的字母\n\n#### 2. 以单个下划线开头的变量\n绝大部分情况下都和普通以字母开头的变量一样，不过，再使用某些场景，比如说用C编写扩展库会用'_'命名，再用去掉下划线的Python模块进行封装\n\n#### 3. 以单个下划线结尾的变量\n这种命名方式在Python官方推荐的代码样式中是作为区分关键字的编码风格，比如说，当我们需要定义一个for变量时，如果非这个名字不可那我们可以依照规范将其命名为`for_`\n\n#### 4. 以两个下划线开头的变量\n网上有部分人会说这是Python里面定义私有成员变量的方式，实际上，Python解释器会对以这种方式命名的变量做一个Name Mangling(改编名字)的操作，定义一个`__n`的变量时，可以通过instance._CLASS_NAME__n的形式访问到，可以参考下述代码\n```\nclass A:\n    def __init__(self, n = 0):\n        self.__n = n\n\na = A(1)\nprint(a.__n)\nprint(a._A__n)\n```\n做这种操作的目的在于避免子类中存在同名变量(这里认为函数也是变量)而产生冲突\n\n#### 5. 以两个下划线开头和结尾的变量\n这种命名形式是Python的\"魔术\"对象，所有的Python入门书中都会提及.当然，不仅限于类中，全局变量`__file__`, `__name__`也是一样，官方建议不要尝试以这样的形式命名自己的变量或者函数，当然，解释器会认为这是合法的，并不会告诉你你这样做会带来的风险\n","source":"_posts/Python下划线命名含义.md","raw":"---\ntitle: Python下划线命名含义\ndate: 2018-06-01 15:09:25\ntags:\ncategory: \n- Python\n---\n\n在使用Python定义类时通常会看到如下几种命名方式:\n\n1. 以字母开头的变量, 如`a`, `b`, `c`\n2. 以单个下划线开头的变量, 如`_f`, `_g`\n3. 以单个下划线结尾的变量, 如`p_`\n4. 以两个下划线开头的变量, 如`__x`, `__y`\n5. 以两个下划线开头和结尾的变量, 如`__init__`, `__del__`等等\n\n这些命名规范有些在解释器中具有特殊含义，有些则是一种通用的非强制性规范。\n\n#### 1. 以字母开头的变量\n这一类变量在各种程序设计语言中都存在，从代码可读性来考虑，应当具有直观的含义，在学校的时候就经常会被要求减少使用a,b,c,i,j,k等在大多场景下不具备含义的字母\n\n#### 2. 以单个下划线开头的变量\n绝大部分情况下都和普通以字母开头的变量一样，不过，再使用某些场景，比如说用C编写扩展库会用'_'命名，再用去掉下划线的Python模块进行封装\n\n#### 3. 以单个下划线结尾的变量\n这种命名方式在Python官方推荐的代码样式中是作为区分关键字的编码风格，比如说，当我们需要定义一个for变量时，如果非这个名字不可那我们可以依照规范将其命名为`for_`\n\n#### 4. 以两个下划线开头的变量\n网上有部分人会说这是Python里面定义私有成员变量的方式，实际上，Python解释器会对以这种方式命名的变量做一个Name Mangling(改编名字)的操作，定义一个`__n`的变量时，可以通过instance._CLASS_NAME__n的形式访问到，可以参考下述代码\n```\nclass A:\n    def __init__(self, n = 0):\n        self.__n = n\n\na = A(1)\nprint(a.__n)\nprint(a._A__n)\n```\n做这种操作的目的在于避免子类中存在同名变量(这里认为函数也是变量)而产生冲突\n\n#### 5. 以两个下划线开头和结尾的变量\n这种命名形式是Python的\"魔术\"对象，所有的Python入门书中都会提及.当然，不仅限于类中，全局变量`__file__`, `__name__`也是一样，官方建议不要尝试以这样的形式命名自己的变量或者函数，当然，解释器会认为这是合法的，并不会告诉你你这样做会带来的风险\n","slug":"Python下划线命名含义","published":1,"updated":"2018-06-04T02:29:46.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjik1hq900001egdmps6wa0az","content":"<p>在使用Python定义类时通常会看到如下几种命名方式:</p>\n<ol>\n<li>以字母开头的变量, 如<code>a</code>, <code>b</code>, <code>c</code></li>\n<li>以单个下划线开头的变量, 如<code>_f</code>, <code>_g</code></li>\n<li>以单个下划线结尾的变量, 如<code>p_</code></li>\n<li>以两个下划线开头的变量, 如<code>__x</code>, <code>__y</code></li>\n<li>以两个下划线开头和结尾的变量, 如<code>__init__</code>, <code>__del__</code>等等</li>\n</ol>\n<p>这些命名规范有些在解释器中具有特殊含义，有些则是一种通用的非强制性规范。</p>\n<h4 id=\"1-以字母开头的变量\"><a href=\"#1-以字母开头的变量\" class=\"headerlink\" title=\"1. 以字母开头的变量\"></a>1. 以字母开头的变量</h4><p>这一类变量在各种程序设计语言中都存在，从代码可读性来考虑，应当具有直观的含义，在学校的时候就经常会被要求减少使用a,b,c,i,j,k等在大多场景下不具备含义的字母</p>\n<h4 id=\"2-以单个下划线开头的变量\"><a href=\"#2-以单个下划线开头的变量\" class=\"headerlink\" title=\"2. 以单个下划线开头的变量\"></a>2. 以单个下划线开头的变量</h4><p>绝大部分情况下都和普通以字母开头的变量一样，不过，再使用某些场景，比如说用C编写扩展库会用’_’命名，再用去掉下划线的Python模块进行封装</p>\n<h4 id=\"3-以单个下划线结尾的变量\"><a href=\"#3-以单个下划线结尾的变量\" class=\"headerlink\" title=\"3. 以单个下划线结尾的变量\"></a>3. 以单个下划线结尾的变量</h4><p>这种命名方式在Python官方推荐的代码样式中是作为区分关键字的编码风格，比如说，当我们需要定义一个for变量时，如果非这个名字不可那我们可以依照规范将其命名为<code>for_</code></p>\n<h4 id=\"4-以两个下划线开头的变量\"><a href=\"#4-以两个下划线开头的变量\" class=\"headerlink\" title=\"4. 以两个下划线开头的变量\"></a>4. 以两个下划线开头的变量</h4><p>网上有部分人会说这是Python里面定义私有成员变量的方式，实际上，Python解释器会对以这种方式命名的变量做一个Name Mangling(改编名字)的操作，定义一个<code>__n</code>的变量时，可以通过instance._CLASS_NAME__n的形式访问到，可以参考下述代码</p>\n<pre><code>class A:\n    def __init__(self, n = 0):\n        self.__n = n\n\na = A(1)\nprint(a.__n)\nprint(a._A__n)\n</code></pre><p>做这种操作的目的在于避免子类中存在同名变量(这里认为函数也是变量)而产生冲突</p>\n<h4 id=\"5-以两个下划线开头和结尾的变量\"><a href=\"#5-以两个下划线开头和结尾的变量\" class=\"headerlink\" title=\"5. 以两个下划线开头和结尾的变量\"></a>5. 以两个下划线开头和结尾的变量</h4><p>这种命名形式是Python的”魔术”对象，所有的Python入门书中都会提及.当然，不仅限于类中，全局变量<code>__file__</code>, <code>__name__</code>也是一样，官方建议不要尝试以这样的形式命名自己的变量或者函数，当然，解释器会认为这是合法的，并不会告诉你你这样做会带来的风险</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在使用Python定义类时通常会看到如下几种命名方式:</p>\n<ol>\n<li>以字母开头的变量, 如<code>a</code>, <code>b</code>, <code>c</code></li>\n<li>以单个下划线开头的变量, 如<code>_f</code>, <code>_g</code></li>\n<li>以单个下划线结尾的变量, 如<code>p_</code></li>\n<li>以两个下划线开头的变量, 如<code>__x</code>, <code>__y</code></li>\n<li>以两个下划线开头和结尾的变量, 如<code>__init__</code>, <code>__del__</code>等等</li>\n</ol>\n<p>这些命名规范有些在解释器中具有特殊含义，有些则是一种通用的非强制性规范。</p>\n<h4 id=\"1-以字母开头的变量\"><a href=\"#1-以字母开头的变量\" class=\"headerlink\" title=\"1. 以字母开头的变量\"></a>1. 以字母开头的变量</h4><p>这一类变量在各种程序设计语言中都存在，从代码可读性来考虑，应当具有直观的含义，在学校的时候就经常会被要求减少使用a,b,c,i,j,k等在大多场景下不具备含义的字母</p>\n<h4 id=\"2-以单个下划线开头的变量\"><a href=\"#2-以单个下划线开头的变量\" class=\"headerlink\" title=\"2. 以单个下划线开头的变量\"></a>2. 以单个下划线开头的变量</h4><p>绝大部分情况下都和普通以字母开头的变量一样，不过，再使用某些场景，比如说用C编写扩展库会用’_’命名，再用去掉下划线的Python模块进行封装</p>\n<h4 id=\"3-以单个下划线结尾的变量\"><a href=\"#3-以单个下划线结尾的变量\" class=\"headerlink\" title=\"3. 以单个下划线结尾的变量\"></a>3. 以单个下划线结尾的变量</h4><p>这种命名方式在Python官方推荐的代码样式中是作为区分关键字的编码风格，比如说，当我们需要定义一个for变量时，如果非这个名字不可那我们可以依照规范将其命名为<code>for_</code></p>\n<h4 id=\"4-以两个下划线开头的变量\"><a href=\"#4-以两个下划线开头的变量\" class=\"headerlink\" title=\"4. 以两个下划线开头的变量\"></a>4. 以两个下划线开头的变量</h4><p>网上有部分人会说这是Python里面定义私有成员变量的方式，实际上，Python解释器会对以这种方式命名的变量做一个Name Mangling(改编名字)的操作，定义一个<code>__n</code>的变量时，可以通过instance._CLASS_NAME__n的形式访问到，可以参考下述代码</p>\n<pre><code>class A:\n    def __init__(self, n = 0):\n        self.__n = n\n\na = A(1)\nprint(a.__n)\nprint(a._A__n)\n</code></pre><p>做这种操作的目的在于避免子类中存在同名变量(这里认为函数也是变量)而产生冲突</p>\n<h4 id=\"5-以两个下划线开头和结尾的变量\"><a href=\"#5-以两个下划线开头和结尾的变量\" class=\"headerlink\" title=\"5. 以两个下划线开头和结尾的变量\"></a>5. 以两个下划线开头和结尾的变量</h4><p>这种命名形式是Python的”魔术”对象，所有的Python入门书中都会提及.当然，不仅限于类中，全局变量<code>__file__</code>, <code>__name__</code>也是一样，官方建议不要尝试以这样的形式命名自己的变量或者函数，当然，解释器会认为这是合法的，并不会告诉你你这样做会带来的风险</p>\n"},{"title":"协程&&gevent","date":"2018-06-13T13:28:46.000Z","_content":"\n## 1. 协程\n通常我们会认为一个函数的执行会是从头到尾，每次的执行的行为几乎是一样的，但是这样的感觉在协程中并不适用，协程，我认为是一个可以被中断以及被重新唤起的函数。在协程的执行过程中，我们可以在需要的地方将协程中断，并转而去执行别的操作，这里与多线程有着显著的区别。在多线程中，会是多个线程同时执行，而协程则始终只有一个线程，只是反复在多个函数之间切换，并且每个函数都会保留上次的执行状态。\n```\n# 通常函数调用\ndef func_a():\n    print(\"x\")\n    print(\"y\")\n    print(\"z\")\n\ndef func_b():\n    print(1)\n    print(2)\n    print(3)\n\nfunc_a()\nfunc_b()\n\n# [Out] \n#       x\n#       y\n#       z\n#       1\n#       2\n#       3\n\n\n# 协程\ndef func_a():\n    print(\"x\")\n    yield\n    print(\"y\")\n    print(\"z\")\n\ndef func_b():\n    print(1)\n    print(2)\n    yield\n    print(3)\n\na = func_a()\nb = func_b()\n\nnext(a)\nnext(b)\nnext(b)\nnext(a)\n# [Out]\n#       x\n#       1\n#       2\n#       3\n#       y\n#       z\n\n# 在第二次调用b和a时，会捕获到StopIteration异常，如果不想看到这个异常使用try语句忽略即可\n```\n上面是一个简单的例子，可以看到在使用协程的时候会与一般的函数调用有所区别，首先在第一次调用`a = func_a()`时，并没有打印出`x`，而是将其返回值赋值给了`a`,其次用到了`next`函数，并且在调用`next`时会将对应的函数的代码执行。我们可以直接将`a`打印出来，得到如下结果:\n```\nprint(a)\n# [Out] <generator object func_a at 0x000002E619E9E780>\n\nprint(func_a)\n# [Out] <function func_a at 0x000002E619EB9D90>\n```\n`a`是`generator`, `func_a`是`function`。也就是说，这时调用`func_a`并不会直接调用到`func_a`中的代码，而是得到一个`generator`，通过`next`函数才能执行其中的代码。\n\n## 2. 生产者消费者模式\n通常实现生产者消费者模式会使用多线程，消费者线程监听资源池，等待生产者往资源池中写入资源，为了避免出现死锁的问题，需要设置锁。如果使用协程来实现，在生产者写入资源之后直接调用消费者使用资源即可，避免了锁的问题\n```\nimport time\ndef consume():\n    msg = ''\n    while True:\n        n = yield msg\n        if not n:\n            return\n        print(\"Consume %d\" % n)\n        time.sleep(1)\n        msg = 'ok'\n \ndef produce(c):\n    c.__next__()\n    for i in range(1, 5):\n        print(\"Produce %d\" % i)\n        r = c.send(i)\n        print(\"Consumer said: %s\" % r)\n    c.close()\n\nc = consume()\nproduce(c)\n```\n这是一个简单的生产者消费者模式，`produce`接受参数`consume`，在接受到`consume`时，首先使用`__next__`函数对他进行调用，此时`consume`的下一次调用入口为`n = yield msg`，当`produce`使用`send`函数将`i`传入`consume`时，`consume`中的`n`的值即为`i`;最后循环至第五次时推出循环，关闭consume。\n\n## 3. gevent\ngevent是第三方协程库，通过greenlet实现协程，原理是当一个greenlet遇到IO操作时则切换到其他的greenlet，待IO操作完成后再在某个时机切换回来继续执行，这样可以使程序在很多时候都是在处理计算操作而不是等待IO。\n\nDemo\n```\nfrom gevent import monkey\nmonkey.patch_socket()\nmonkey.patch_ssl()\nimport gevent\nimport request\n\ndef proc(url):\n    print(\"Access %s...\" % url)\n    rep = requests.get(url)\n    print(\"Length of response from %s is %d\" % (url, len(rep.text)))\n\ngevent.joinall([\n    gevent.spawn(proc, 'https://www.baidu.com'),\n    gevent.spawn(proc, 'https://github.com'),\n    gevent.spawn(proc, 'https://www.bilibili.com')\n])\n# [Out] Access https://www.baidu.com...\n#       Access https://github.com...\n#       Access https://www.bilibili.com...\n#       Length of response from https://www.baidu.com is 2443\n#       Length of response from https://www.bilibili.com is 24268\n#       Length of response from https://github.com is 59430\n```\n上述代码最终的输出结果\"Access...\"部分几乎是同时打印出来的，因为requests的操作是IO操作，因此直接被暂时搁置了。值得注意的小细节是，`monkey.patch_socket()`和`monkey.patch_ssl()`这两行代码，由于切换greenlet时是在遇到IO操作时进行，因此gevent会对Python内置的库进行一些修改，为了避免出现网络请求上的异常需要将两行代码包含进来，具体需要patch哪些部分请根据实际需求来操作。\n\n## 4. 多线程与协程的不同\n这里我排除Python中的GIL带来的影响，单从多线程与协程本身的特性来分析。\n|    | 多线程    |  协程  |\n|:--:|:--------:|:------:|\n|代码复杂度|需要考虑访问共享数据时带来的麻烦，复杂度较高|单线程处理，不存在数据共享带来的问题，复杂度较低\n|切换的代价|线程切换由CPU进行调度，两个线程的切换需要将线程A的状态保存，并重新载入线程B的状态，在不同的操作系统中表现不一样，通常会涉及到页表切换，TLB刷新等操作|在用户态上做切换，涉及到堆栈信息的复制，开销很小|\n|创建与销毁|不同的操作系统对线程的创建开销不尽相同，但是都会为线程分配堆栈与内存空间|协程本质上就是函数，与调用函数的开销相同|\n从上面来看，协程在代码复杂度，创建以及切换的开销上都比使用多线程要来的优秀，**但是**，如果说协程的主流程中存在阻塞的情况那么整个协程都会被阻塞，如果说整个程序只有计算的话，协程并不见得比多线程有优势，相反，在IO密集型的场景下，协程比之多线程要效率高一点，因此，具体使用哪一种来实现系统应当根据实际情况来设计，而不是盲目认为协程比多线程更优或是多线程比协程更快。\n如有不足之处，欢迎指正。\n\n","source":"_posts/协程-gevent.md","raw":"---\ntitle: 协程&&gevent\ndate: 2018-06-13 21:28:46\ntags:\ncategory: \n- Python\n- 多线程\n- 协程\n---\n\n## 1. 协程\n通常我们会认为一个函数的执行会是从头到尾，每次的执行的行为几乎是一样的，但是这样的感觉在协程中并不适用，协程，我认为是一个可以被中断以及被重新唤起的函数。在协程的执行过程中，我们可以在需要的地方将协程中断，并转而去执行别的操作，这里与多线程有着显著的区别。在多线程中，会是多个线程同时执行，而协程则始终只有一个线程，只是反复在多个函数之间切换，并且每个函数都会保留上次的执行状态。\n```\n# 通常函数调用\ndef func_a():\n    print(\"x\")\n    print(\"y\")\n    print(\"z\")\n\ndef func_b():\n    print(1)\n    print(2)\n    print(3)\n\nfunc_a()\nfunc_b()\n\n# [Out] \n#       x\n#       y\n#       z\n#       1\n#       2\n#       3\n\n\n# 协程\ndef func_a():\n    print(\"x\")\n    yield\n    print(\"y\")\n    print(\"z\")\n\ndef func_b():\n    print(1)\n    print(2)\n    yield\n    print(3)\n\na = func_a()\nb = func_b()\n\nnext(a)\nnext(b)\nnext(b)\nnext(a)\n# [Out]\n#       x\n#       1\n#       2\n#       3\n#       y\n#       z\n\n# 在第二次调用b和a时，会捕获到StopIteration异常，如果不想看到这个异常使用try语句忽略即可\n```\n上面是一个简单的例子，可以看到在使用协程的时候会与一般的函数调用有所区别，首先在第一次调用`a = func_a()`时，并没有打印出`x`，而是将其返回值赋值给了`a`,其次用到了`next`函数，并且在调用`next`时会将对应的函数的代码执行。我们可以直接将`a`打印出来，得到如下结果:\n```\nprint(a)\n# [Out] <generator object func_a at 0x000002E619E9E780>\n\nprint(func_a)\n# [Out] <function func_a at 0x000002E619EB9D90>\n```\n`a`是`generator`, `func_a`是`function`。也就是说，这时调用`func_a`并不会直接调用到`func_a`中的代码，而是得到一个`generator`，通过`next`函数才能执行其中的代码。\n\n## 2. 生产者消费者模式\n通常实现生产者消费者模式会使用多线程，消费者线程监听资源池，等待生产者往资源池中写入资源，为了避免出现死锁的问题，需要设置锁。如果使用协程来实现，在生产者写入资源之后直接调用消费者使用资源即可，避免了锁的问题\n```\nimport time\ndef consume():\n    msg = ''\n    while True:\n        n = yield msg\n        if not n:\n            return\n        print(\"Consume %d\" % n)\n        time.sleep(1)\n        msg = 'ok'\n \ndef produce(c):\n    c.__next__()\n    for i in range(1, 5):\n        print(\"Produce %d\" % i)\n        r = c.send(i)\n        print(\"Consumer said: %s\" % r)\n    c.close()\n\nc = consume()\nproduce(c)\n```\n这是一个简单的生产者消费者模式，`produce`接受参数`consume`，在接受到`consume`时，首先使用`__next__`函数对他进行调用，此时`consume`的下一次调用入口为`n = yield msg`，当`produce`使用`send`函数将`i`传入`consume`时，`consume`中的`n`的值即为`i`;最后循环至第五次时推出循环，关闭consume。\n\n## 3. gevent\ngevent是第三方协程库，通过greenlet实现协程，原理是当一个greenlet遇到IO操作时则切换到其他的greenlet，待IO操作完成后再在某个时机切换回来继续执行，这样可以使程序在很多时候都是在处理计算操作而不是等待IO。\n\nDemo\n```\nfrom gevent import monkey\nmonkey.patch_socket()\nmonkey.patch_ssl()\nimport gevent\nimport request\n\ndef proc(url):\n    print(\"Access %s...\" % url)\n    rep = requests.get(url)\n    print(\"Length of response from %s is %d\" % (url, len(rep.text)))\n\ngevent.joinall([\n    gevent.spawn(proc, 'https://www.baidu.com'),\n    gevent.spawn(proc, 'https://github.com'),\n    gevent.spawn(proc, 'https://www.bilibili.com')\n])\n# [Out] Access https://www.baidu.com...\n#       Access https://github.com...\n#       Access https://www.bilibili.com...\n#       Length of response from https://www.baidu.com is 2443\n#       Length of response from https://www.bilibili.com is 24268\n#       Length of response from https://github.com is 59430\n```\n上述代码最终的输出结果\"Access...\"部分几乎是同时打印出来的，因为requests的操作是IO操作，因此直接被暂时搁置了。值得注意的小细节是，`monkey.patch_socket()`和`monkey.patch_ssl()`这两行代码，由于切换greenlet时是在遇到IO操作时进行，因此gevent会对Python内置的库进行一些修改，为了避免出现网络请求上的异常需要将两行代码包含进来，具体需要patch哪些部分请根据实际需求来操作。\n\n## 4. 多线程与协程的不同\n这里我排除Python中的GIL带来的影响，单从多线程与协程本身的特性来分析。\n|    | 多线程    |  协程  |\n|:--:|:--------:|:------:|\n|代码复杂度|需要考虑访问共享数据时带来的麻烦，复杂度较高|单线程处理，不存在数据共享带来的问题，复杂度较低\n|切换的代价|线程切换由CPU进行调度，两个线程的切换需要将线程A的状态保存，并重新载入线程B的状态，在不同的操作系统中表现不一样，通常会涉及到页表切换，TLB刷新等操作|在用户态上做切换，涉及到堆栈信息的复制，开销很小|\n|创建与销毁|不同的操作系统对线程的创建开销不尽相同，但是都会为线程分配堆栈与内存空间|协程本质上就是函数，与调用函数的开销相同|\n从上面来看，协程在代码复杂度，创建以及切换的开销上都比使用多线程要来的优秀，**但是**，如果说协程的主流程中存在阻塞的情况那么整个协程都会被阻塞，如果说整个程序只有计算的话，协程并不见得比多线程有优势，相反，在IO密集型的场景下，协程比之多线程要效率高一点，因此，具体使用哪一种来实现系统应当根据实际情况来设计，而不是盲目认为协程比多线程更优或是多线程比协程更快。\n如有不足之处，欢迎指正。\n\n","slug":"协程-gevent","published":1,"updated":"2018-06-18T09:10:00.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjik1hq900003egdm7rp2ysyt","content":"<h2 id=\"1-协程\"><a href=\"#1-协程\" class=\"headerlink\" title=\"1. 协程\"></a>1. 协程</h2><p>通常我们会认为一个函数的执行会是从头到尾，每次的执行的行为几乎是一样的，但是这样的感觉在协程中并不适用，协程，我认为是一个可以被中断以及被重新唤起的函数。在协程的执行过程中，我们可以在需要的地方将协程中断，并转而去执行别的操作，这里与多线程有着显著的区别。在多线程中，会是多个线程同时执行，而协程则始终只有一个线程，只是反复在多个函数之间切换，并且每个函数都会保留上次的执行状态。</p>\n<pre><code># 通常函数调用\ndef func_a():\n    print(&quot;x&quot;)\n    print(&quot;y&quot;)\n    print(&quot;z&quot;)\n\ndef func_b():\n    print(1)\n    print(2)\n    print(3)\n\nfunc_a()\nfunc_b()\n\n# [Out] \n#       x\n#       y\n#       z\n#       1\n#       2\n#       3\n\n\n# 协程\ndef func_a():\n    print(&quot;x&quot;)\n    yield\n    print(&quot;y&quot;)\n    print(&quot;z&quot;)\n\ndef func_b():\n    print(1)\n    print(2)\n    yield\n    print(3)\n\na = func_a()\nb = func_b()\n\nnext(a)\nnext(b)\nnext(b)\nnext(a)\n# [Out]\n#       x\n#       1\n#       2\n#       3\n#       y\n#       z\n\n# 在第二次调用b和a时，会捕获到StopIteration异常，如果不想看到这个异常使用try语句忽略即可\n</code></pre><p>上面是一个简单的例子，可以看到在使用协程的时候会与一般的函数调用有所区别，首先在第一次调用<code>a = func_a()</code>时，并没有打印出<code>x</code>，而是将其返回值赋值给了<code>a</code>,其次用到了<code>next</code>函数，并且在调用<code>next</code>时会将对应的函数的代码执行。我们可以直接将<code>a</code>打印出来，得到如下结果:</p>\n<pre><code>print(a)\n# [Out] &lt;generator object func_a at 0x000002E619E9E780&gt;\n\nprint(func_a)\n# [Out] &lt;function func_a at 0x000002E619EB9D90&gt;\n</code></pre><p><code>a</code>是<code>generator</code>, <code>func_a</code>是<code>function</code>。也就是说，这时调用<code>func_a</code>并不会直接调用到<code>func_a</code>中的代码，而是得到一个<code>generator</code>，通过<code>next</code>函数才能执行其中的代码。</p>\n<h2 id=\"2-生产者消费者模式\"><a href=\"#2-生产者消费者模式\" class=\"headerlink\" title=\"2. 生产者消费者模式\"></a>2. 生产者消费者模式</h2><p>通常实现生产者消费者模式会使用多线程，消费者线程监听资源池，等待生产者往资源池中写入资源，为了避免出现死锁的问题，需要设置锁。如果使用协程来实现，在生产者写入资源之后直接调用消费者使用资源即可，避免了锁的问题</p>\n<pre><code>import time\ndef consume():\n    msg = &#39;&#39;\n    while True:\n        n = yield msg\n        if not n:\n            return\n        print(&quot;Consume %d&quot; % n)\n        time.sleep(1)\n        msg = &#39;ok&#39;\n\ndef produce(c):\n    c.__next__()\n    for i in range(1, 5):\n        print(&quot;Produce %d&quot; % i)\n        r = c.send(i)\n        print(&quot;Consumer said: %s&quot; % r)\n    c.close()\n\nc = consume()\nproduce(c)\n</code></pre><p>这是一个简单的生产者消费者模式，<code>produce</code>接受参数<code>consume</code>，在接受到<code>consume</code>时，首先使用<code>__next__</code>函数对他进行调用，此时<code>consume</code>的下一次调用入口为<code>n = yield msg</code>，当<code>produce</code>使用<code>send</code>函数将<code>i</code>传入<code>consume</code>时，<code>consume</code>中的<code>n</code>的值即为<code>i</code>;最后循环至第五次时推出循环，关闭consume。</p>\n<h2 id=\"3-gevent\"><a href=\"#3-gevent\" class=\"headerlink\" title=\"3. gevent\"></a>3. gevent</h2><p>gevent是第三方协程库，通过greenlet实现协程，原理是当一个greenlet遇到IO操作时则切换到其他的greenlet，待IO操作完成后再在某个时机切换回来继续执行，这样可以使程序在很多时候都是在处理计算操作而不是等待IO。</p>\n<p>Demo</p>\n<pre><code>from gevent import monkey\nmonkey.patch_socket()\nmonkey.patch_ssl()\nimport gevent\nimport request\n\ndef proc(url):\n    print(&quot;Access %s...&quot; % url)\n    rep = requests.get(url)\n    print(&quot;Length of response from %s is %d&quot; % (url, len(rep.text)))\n\ngevent.joinall([\n    gevent.spawn(proc, &#39;https://www.baidu.com&#39;),\n    gevent.spawn(proc, &#39;https://github.com&#39;),\n    gevent.spawn(proc, &#39;https://www.bilibili.com&#39;)\n])\n# [Out] Access https://www.baidu.com...\n#       Access https://github.com...\n#       Access https://www.bilibili.com...\n#       Length of response from https://www.baidu.com is 2443\n#       Length of response from https://www.bilibili.com is 24268\n#       Length of response from https://github.com is 59430\n</code></pre><p>上述代码最终的输出结果”Access…”部分几乎是同时打印出来的，因为requests的操作是IO操作，因此直接被暂时搁置了。值得注意的小细节是，<code>monkey.patch_socket()</code>和<code>monkey.patch_ssl()</code>这两行代码，由于切换greenlet时是在遇到IO操作时进行，因此gevent会对Python内置的库进行一些修改，为了避免出现网络请求上的异常需要将两行代码包含进来，具体需要patch哪些部分请根据实际需求来操作。</p>\n<h2 id=\"4-多线程与协程的不同\"><a href=\"#4-多线程与协程的不同\" class=\"headerlink\" title=\"4. 多线程与协程的不同\"></a>4. 多线程与协程的不同</h2><p>这里我排除Python中的GIL带来的影响，单从多线程与协程本身的特性来分析。<br>|    | 多线程    |  协程  |<br>|:–:|:——–:|:——:|<br>|代码复杂度|需要考虑访问共享数据时带来的麻烦，复杂度较高|单线程处理，不存在数据共享带来的问题，复杂度较低<br>|切换的代价|线程切换由CPU进行调度，两个线程的切换需要将线程A的状态保存，并重新载入线程B的状态，在不同的操作系统中表现不一样，通常会涉及到页表切换，TLB刷新等操作|在用户态上做切换，涉及到堆栈信息的复制，开销很小|<br>|创建与销毁|不同的操作系统对线程的创建开销不尽相同，但是都会为线程分配堆栈与内存空间|协程本质上就是函数，与调用函数的开销相同|<br>从上面来看，协程在代码复杂度，创建以及切换的开销上都比使用多线程要来的优秀，<strong>但是</strong>，如果说协程的主流程中存在阻塞的情况那么整个协程都会被阻塞，如果说整个程序只有计算的话，协程并不见得比多线程有优势，相反，在IO密集型的场景下，协程比之多线程要效率高一点，因此，具体使用哪一种来实现系统应当根据实际情况来设计，而不是盲目认为协程比多线程更优或是多线程比协程更快。<br>如有不足之处，欢迎指正。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-协程\"><a href=\"#1-协程\" class=\"headerlink\" title=\"1. 协程\"></a>1. 协程</h2><p>通常我们会认为一个函数的执行会是从头到尾，每次的执行的行为几乎是一样的，但是这样的感觉在协程中并不适用，协程，我认为是一个可以被中断以及被重新唤起的函数。在协程的执行过程中，我们可以在需要的地方将协程中断，并转而去执行别的操作，这里与多线程有着显著的区别。在多线程中，会是多个线程同时执行，而协程则始终只有一个线程，只是反复在多个函数之间切换，并且每个函数都会保留上次的执行状态。</p>\n<pre><code># 通常函数调用\ndef func_a():\n    print(&quot;x&quot;)\n    print(&quot;y&quot;)\n    print(&quot;z&quot;)\n\ndef func_b():\n    print(1)\n    print(2)\n    print(3)\n\nfunc_a()\nfunc_b()\n\n# [Out] \n#       x\n#       y\n#       z\n#       1\n#       2\n#       3\n\n\n# 协程\ndef func_a():\n    print(&quot;x&quot;)\n    yield\n    print(&quot;y&quot;)\n    print(&quot;z&quot;)\n\ndef func_b():\n    print(1)\n    print(2)\n    yield\n    print(3)\n\na = func_a()\nb = func_b()\n\nnext(a)\nnext(b)\nnext(b)\nnext(a)\n# [Out]\n#       x\n#       1\n#       2\n#       3\n#       y\n#       z\n\n# 在第二次调用b和a时，会捕获到StopIteration异常，如果不想看到这个异常使用try语句忽略即可\n</code></pre><p>上面是一个简单的例子，可以看到在使用协程的时候会与一般的函数调用有所区别，首先在第一次调用<code>a = func_a()</code>时，并没有打印出<code>x</code>，而是将其返回值赋值给了<code>a</code>,其次用到了<code>next</code>函数，并且在调用<code>next</code>时会将对应的函数的代码执行。我们可以直接将<code>a</code>打印出来，得到如下结果:</p>\n<pre><code>print(a)\n# [Out] &lt;generator object func_a at 0x000002E619E9E780&gt;\n\nprint(func_a)\n# [Out] &lt;function func_a at 0x000002E619EB9D90&gt;\n</code></pre><p><code>a</code>是<code>generator</code>, <code>func_a</code>是<code>function</code>。也就是说，这时调用<code>func_a</code>并不会直接调用到<code>func_a</code>中的代码，而是得到一个<code>generator</code>，通过<code>next</code>函数才能执行其中的代码。</p>\n<h2 id=\"2-生产者消费者模式\"><a href=\"#2-生产者消费者模式\" class=\"headerlink\" title=\"2. 生产者消费者模式\"></a>2. 生产者消费者模式</h2><p>通常实现生产者消费者模式会使用多线程，消费者线程监听资源池，等待生产者往资源池中写入资源，为了避免出现死锁的问题，需要设置锁。如果使用协程来实现，在生产者写入资源之后直接调用消费者使用资源即可，避免了锁的问题</p>\n<pre><code>import time\ndef consume():\n    msg = &#39;&#39;\n    while True:\n        n = yield msg\n        if not n:\n            return\n        print(&quot;Consume %d&quot; % n)\n        time.sleep(1)\n        msg = &#39;ok&#39;\n\ndef produce(c):\n    c.__next__()\n    for i in range(1, 5):\n        print(&quot;Produce %d&quot; % i)\n        r = c.send(i)\n        print(&quot;Consumer said: %s&quot; % r)\n    c.close()\n\nc = consume()\nproduce(c)\n</code></pre><p>这是一个简单的生产者消费者模式，<code>produce</code>接受参数<code>consume</code>，在接受到<code>consume</code>时，首先使用<code>__next__</code>函数对他进行调用，此时<code>consume</code>的下一次调用入口为<code>n = yield msg</code>，当<code>produce</code>使用<code>send</code>函数将<code>i</code>传入<code>consume</code>时，<code>consume</code>中的<code>n</code>的值即为<code>i</code>;最后循环至第五次时推出循环，关闭consume。</p>\n<h2 id=\"3-gevent\"><a href=\"#3-gevent\" class=\"headerlink\" title=\"3. gevent\"></a>3. gevent</h2><p>gevent是第三方协程库，通过greenlet实现协程，原理是当一个greenlet遇到IO操作时则切换到其他的greenlet，待IO操作完成后再在某个时机切换回来继续执行，这样可以使程序在很多时候都是在处理计算操作而不是等待IO。</p>\n<p>Demo</p>\n<pre><code>from gevent import monkey\nmonkey.patch_socket()\nmonkey.patch_ssl()\nimport gevent\nimport request\n\ndef proc(url):\n    print(&quot;Access %s...&quot; % url)\n    rep = requests.get(url)\n    print(&quot;Length of response from %s is %d&quot; % (url, len(rep.text)))\n\ngevent.joinall([\n    gevent.spawn(proc, &#39;https://www.baidu.com&#39;),\n    gevent.spawn(proc, &#39;https://github.com&#39;),\n    gevent.spawn(proc, &#39;https://www.bilibili.com&#39;)\n])\n# [Out] Access https://www.baidu.com...\n#       Access https://github.com...\n#       Access https://www.bilibili.com...\n#       Length of response from https://www.baidu.com is 2443\n#       Length of response from https://www.bilibili.com is 24268\n#       Length of response from https://github.com is 59430\n</code></pre><p>上述代码最终的输出结果”Access…”部分几乎是同时打印出来的，因为requests的操作是IO操作，因此直接被暂时搁置了。值得注意的小细节是，<code>monkey.patch_socket()</code>和<code>monkey.patch_ssl()</code>这两行代码，由于切换greenlet时是在遇到IO操作时进行，因此gevent会对Python内置的库进行一些修改，为了避免出现网络请求上的异常需要将两行代码包含进来，具体需要patch哪些部分请根据实际需求来操作。</p>\n<h2 id=\"4-多线程与协程的不同\"><a href=\"#4-多线程与协程的不同\" class=\"headerlink\" title=\"4. 多线程与协程的不同\"></a>4. 多线程与协程的不同</h2><p>这里我排除Python中的GIL带来的影响，单从多线程与协程本身的特性来分析。<br>|    | 多线程    |  协程  |<br>|:–:|:——–:|:——:|<br>|代码复杂度|需要考虑访问共享数据时带来的麻烦，复杂度较高|单线程处理，不存在数据共享带来的问题，复杂度较低<br>|切换的代价|线程切换由CPU进行调度，两个线程的切换需要将线程A的状态保存，并重新载入线程B的状态，在不同的操作系统中表现不一样，通常会涉及到页表切换，TLB刷新等操作|在用户态上做切换，涉及到堆栈信息的复制，开销很小|<br>|创建与销毁|不同的操作系统对线程的创建开销不尽相同，但是都会为线程分配堆栈与内存空间|协程本质上就是函数，与调用函数的开销相同|<br>从上面来看，协程在代码复杂度，创建以及切换的开销上都比使用多线程要来的优秀，<strong>但是</strong>，如果说协程的主流程中存在阻塞的情况那么整个协程都会被阻塞，如果说整个程序只有计算的话，协程并不见得比多线程有优势，相反，在IO密集型的场景下，协程比之多线程要效率高一点，因此，具体使用哪一种来实现系统应当根据实际情况来设计，而不是盲目认为协程比多线程更优或是多线程比协程更快。<br>如有不足之处，欢迎指正。</p>\n"},{"title":"理解Python装饰器","date":"2018-06-04T03:42:24.000Z","_content":"\n## 1. 函数是对象\n在Python中，函数也被实现为一种对象，这意味着函数也可以当做普通的变量一样处理，赋值，作为参数传递，作为返回值返回等等。由于内部将函数实现为对象，也被很多人诟病Python中的函数并不是\"一等公民\"却和函数式编程中的函数具有类似的特性。在SICP中，对\"一等公民\"的定义是\n> Elements with the fewest restrictions are said to have first-class status. Some of the \"rights and privileges\" of first-class elements are:\n> 1. They may be named by variables.\n> 2. They may be passed as arguments to procedures.\n> 3. They may be returned as the results of procedures.\n> 4. They may be included in data structures.\n\n即\"一等公民\"可以作为变量命名，可以作为参数用到procedures中，可以作为函数返回值返回，也可以包含在数据结构中。\n\n## 2. 高阶函数\n在维基百科中[高阶函数](https://zh.wikipedia.org/wiki/高阶函数)的定义如下:\n> 在数学和计算机科学中，高阶函数是至少满足下列一个条件的函数：\n> * 接受一个或多个函数作为输入 \n> * 输出一个函数\n\n也就是说，一个接受函数为参数或者返回一个函数的函数即为高阶函数，像Python内置的`map`、`filter`以及`wraps`等等都是高阶函数，我们常常会看到类似下面这种代码:\n```\ndef square(x):\n    return x*x\ndata = map(square, [0, 1, 2, 3])\nprint(data)\n# Python2版本\n# [Out] [0, 1, 4, 9]\n# 如果上述代码运行在Python3环境下会是类似<map object at 0x00000000060596D8>的结果，这是Python3解释器将map的返回实现为生成器的原因，需要换一种方式\nprint(list(data))\n# [Out] [0, 1, 4, 9]\n\ndef is_odd(n):\n    return n%2==1\n\ndata = filter(is_odd, [0, 1, 2, 3, 4, 5, 6, 7])\nprint(list(data))\n# [Out] [1, 3, 5, 7]\n```\n\n## 3. 闭包\n维基百科中对[闭包](https://zh.wikipedia.org/wiki/闭包_(计算机科学))的定义如下:\n>在计算机科学中，闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。\n\n简单点来说，当我们在一个函数A内定义一个函数α，且在α中引用了函数A中的变量，而且函数A的返回值对α保有引用，那么这个时候便构成了一个闭包。也就是说，此时虽然函数A已经调用完成，但是依然可以通过它的返回值找到α的引用，比如说:\n```\ndef func(step):\n    n = 100\n    def down():\n        nonlocal n  # 此行代码在Python3版本有效，去掉此行会报错\n        n -= step\n        if n < 0:\n            n = 0\n        print(n)\n    return down\n\nfoo = func(1)\nbar = func(5)\n\nfoo()\n# [Out] 99\nfoo()\n# [Out] 98\nbar()\n# [Out] 95\n```\n在上述代码中，`foo`是一个闭包，`bar`是另一个闭包，为了能记录`n`的值，闭包必须要包含对`n`与`down`的引用，所以，闭包实际上是变量以及变量所处的环境的封装\n\n## 4. 装饰器\n说了这么多，终于来到了这篇文章的主角--装饰器。\n装饰器是一个返回函数的高阶函数。利用装饰器，可以很方便的在执行某一个函数前做一些预处理，也可以在执行函数后执行一些预期的代码。\n```\ndef clock(proc):\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        res = proc(*args, **kwargs)\n        end = time.time()\n        print(\"function %s execute %f seconds\" % (proc.__name__, end-start))\n        return res\n    return wrapper\n\n@clock\ndef func(n):\n    time.sleep(n)\n    print(\"wake up\")\n\nfunc(3)\n# [Out] wake up\n#       function func execute 3.001000 seconds\n```\n在这里，`func`函数定义前加了一行的`@clock`，等价于在定义`func`后执行`func = clock(func)`。\n\n当然，装饰器本身也能有额外的参数\n```\ndef clock(msg):\n    def wrapper0(proc):\n        def wrapper1(*args, **kwargs):\n            print(\"Message from clock is '%s'\" % msg)\n            start = time.time()\n            res = proc(*args, **kwargs)\n            end = time.time()\n            print(\"function %s execute %f seconds\" % (proc.__name__, end-start))\n            return res\n        return wrapper1\n    return wrapper0\n\n@clock(\"Hello Lazier\")\ndef func(n):\n    time.sleep(n)\n    print('wake up')\n\nfunc(3)\n\n# [Out] Message from clock is 'Hello Lazier'\n#       wake up\n#       function func execute 3.001000 seconds\n```\n\n## 5. 类装饰器\nPython中的对象具有`__call__`函数，定义这个函数能够让对象和函数一样被调用。因此，在类中重写`__call__`函数即可实现类装饰器，例如:\n```\nclass Decorator:\n    def __init__(self, proc):\n        print(\"Instance of Decorator init...\")\n        self.proc = proc\n    \n    def __call__(self, *args, **kwargs):\n        print(\"Instance of Decorator call...\")\n        res = self.proc(*args, **kwargs)\n        return res\n\n@Decorator\ndef func():\n    print(\"Hello\")\n# [Out] Instance of Decorator init...\n\nfunc()\n# [Out] Instance of Decorator call...\n        Hello\n```\n当然，`@Decorator`的用法也可以用等价的python代码来实现。\n```\nfunc = Decorator(func)\n```\n\n## 6. 装饰器的顺序\n一个函数可以使用多个装饰器，当函数有多个装饰器时，调用顺序为从上至下，即\n```\n@d0\n@d1\n@d2\ndef f():\n    pass\n```\n等价于\n```\nf = d0(d1(d2(f)))\n```\n\n## 7. 使用装饰器可能产生的后果\n从上面可以知道，装饰器是可以用`f = d(f)`的形式来等价实现的，这之中存在一个弊端，那就是`f`此时已经变成了`d`的返回值，也就是说，`__name__`和`__doc__`都会变成`d`的返回值的`__name__`和`__doc__`。\n```\ndef d(proc):\n    def wrapper(*args, **kwargs):\n        return proc(*args, **kwargs)\n    return wrapper\n\n@d\ndef f():\n    print(\"Hello\")\n\nprint(f)\n# [Out] <function d.<locals>.wrapper at 0x000000000609AA60>\n\nprint(f.__name__)\n# [Out] wrapper\n```\n在某些时候，我们需要根据函数的名字来做判断，那么，用这样的方法自然无法满足我们的需求。Python内置的`wraps`可以帮助我们保留住函数原本的信息。(P.S. `wraps`在`functools`包中)\n```\nfrom functools import wraps\ndef d(proc):\n    @wraps(proc)\n    def wrapper(*args, **kwargs):\n        return proc(*args, **kwargs)\n    return wrapper\n\n@d\ndef f():\n    print(\"Hello\")\n\nprint(f)\n# [Out] <function f at 0x0000000004B58730>\n\nprint(f.__name__)\n# [Out] f\n```\n\n利用好装饰器可以在用更少的代码实现更多的功能，并且也可以提高代码的复用性。设计优秀的装饰器对于调用者来说可以省去许多事情。\n\n如有不足之处，欢迎指正。\n","source":"_posts/理解Python装饰器.md","raw":"---\ntitle: 理解Python装饰器\ndate: 2018-06-04 11:42:24\ntags:\ncategory: \n- Python\n- 函数式编程\n---\n\n## 1. 函数是对象\n在Python中，函数也被实现为一种对象，这意味着函数也可以当做普通的变量一样处理，赋值，作为参数传递，作为返回值返回等等。由于内部将函数实现为对象，也被很多人诟病Python中的函数并不是\"一等公民\"却和函数式编程中的函数具有类似的特性。在SICP中，对\"一等公民\"的定义是\n> Elements with the fewest restrictions are said to have first-class status. Some of the \"rights and privileges\" of first-class elements are:\n> 1. They may be named by variables.\n> 2. They may be passed as arguments to procedures.\n> 3. They may be returned as the results of procedures.\n> 4. They may be included in data structures.\n\n即\"一等公民\"可以作为变量命名，可以作为参数用到procedures中，可以作为函数返回值返回，也可以包含在数据结构中。\n\n## 2. 高阶函数\n在维基百科中[高阶函数](https://zh.wikipedia.org/wiki/高阶函数)的定义如下:\n> 在数学和计算机科学中，高阶函数是至少满足下列一个条件的函数：\n> * 接受一个或多个函数作为输入 \n> * 输出一个函数\n\n也就是说，一个接受函数为参数或者返回一个函数的函数即为高阶函数，像Python内置的`map`、`filter`以及`wraps`等等都是高阶函数，我们常常会看到类似下面这种代码:\n```\ndef square(x):\n    return x*x\ndata = map(square, [0, 1, 2, 3])\nprint(data)\n# Python2版本\n# [Out] [0, 1, 4, 9]\n# 如果上述代码运行在Python3环境下会是类似<map object at 0x00000000060596D8>的结果，这是Python3解释器将map的返回实现为生成器的原因，需要换一种方式\nprint(list(data))\n# [Out] [0, 1, 4, 9]\n\ndef is_odd(n):\n    return n%2==1\n\ndata = filter(is_odd, [0, 1, 2, 3, 4, 5, 6, 7])\nprint(list(data))\n# [Out] [1, 3, 5, 7]\n```\n\n## 3. 闭包\n维基百科中对[闭包](https://zh.wikipedia.org/wiki/闭包_(计算机科学))的定义如下:\n>在计算机科学中，闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。\n\n简单点来说，当我们在一个函数A内定义一个函数α，且在α中引用了函数A中的变量，而且函数A的返回值对α保有引用，那么这个时候便构成了一个闭包。也就是说，此时虽然函数A已经调用完成，但是依然可以通过它的返回值找到α的引用，比如说:\n```\ndef func(step):\n    n = 100\n    def down():\n        nonlocal n  # 此行代码在Python3版本有效，去掉此行会报错\n        n -= step\n        if n < 0:\n            n = 0\n        print(n)\n    return down\n\nfoo = func(1)\nbar = func(5)\n\nfoo()\n# [Out] 99\nfoo()\n# [Out] 98\nbar()\n# [Out] 95\n```\n在上述代码中，`foo`是一个闭包，`bar`是另一个闭包，为了能记录`n`的值，闭包必须要包含对`n`与`down`的引用，所以，闭包实际上是变量以及变量所处的环境的封装\n\n## 4. 装饰器\n说了这么多，终于来到了这篇文章的主角--装饰器。\n装饰器是一个返回函数的高阶函数。利用装饰器，可以很方便的在执行某一个函数前做一些预处理，也可以在执行函数后执行一些预期的代码。\n```\ndef clock(proc):\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        res = proc(*args, **kwargs)\n        end = time.time()\n        print(\"function %s execute %f seconds\" % (proc.__name__, end-start))\n        return res\n    return wrapper\n\n@clock\ndef func(n):\n    time.sleep(n)\n    print(\"wake up\")\n\nfunc(3)\n# [Out] wake up\n#       function func execute 3.001000 seconds\n```\n在这里，`func`函数定义前加了一行的`@clock`，等价于在定义`func`后执行`func = clock(func)`。\n\n当然，装饰器本身也能有额外的参数\n```\ndef clock(msg):\n    def wrapper0(proc):\n        def wrapper1(*args, **kwargs):\n            print(\"Message from clock is '%s'\" % msg)\n            start = time.time()\n            res = proc(*args, **kwargs)\n            end = time.time()\n            print(\"function %s execute %f seconds\" % (proc.__name__, end-start))\n            return res\n        return wrapper1\n    return wrapper0\n\n@clock(\"Hello Lazier\")\ndef func(n):\n    time.sleep(n)\n    print('wake up')\n\nfunc(3)\n\n# [Out] Message from clock is 'Hello Lazier'\n#       wake up\n#       function func execute 3.001000 seconds\n```\n\n## 5. 类装饰器\nPython中的对象具有`__call__`函数，定义这个函数能够让对象和函数一样被调用。因此，在类中重写`__call__`函数即可实现类装饰器，例如:\n```\nclass Decorator:\n    def __init__(self, proc):\n        print(\"Instance of Decorator init...\")\n        self.proc = proc\n    \n    def __call__(self, *args, **kwargs):\n        print(\"Instance of Decorator call...\")\n        res = self.proc(*args, **kwargs)\n        return res\n\n@Decorator\ndef func():\n    print(\"Hello\")\n# [Out] Instance of Decorator init...\n\nfunc()\n# [Out] Instance of Decorator call...\n        Hello\n```\n当然，`@Decorator`的用法也可以用等价的python代码来实现。\n```\nfunc = Decorator(func)\n```\n\n## 6. 装饰器的顺序\n一个函数可以使用多个装饰器，当函数有多个装饰器时，调用顺序为从上至下，即\n```\n@d0\n@d1\n@d2\ndef f():\n    pass\n```\n等价于\n```\nf = d0(d1(d2(f)))\n```\n\n## 7. 使用装饰器可能产生的后果\n从上面可以知道，装饰器是可以用`f = d(f)`的形式来等价实现的，这之中存在一个弊端，那就是`f`此时已经变成了`d`的返回值，也就是说，`__name__`和`__doc__`都会变成`d`的返回值的`__name__`和`__doc__`。\n```\ndef d(proc):\n    def wrapper(*args, **kwargs):\n        return proc(*args, **kwargs)\n    return wrapper\n\n@d\ndef f():\n    print(\"Hello\")\n\nprint(f)\n# [Out] <function d.<locals>.wrapper at 0x000000000609AA60>\n\nprint(f.__name__)\n# [Out] wrapper\n```\n在某些时候，我们需要根据函数的名字来做判断，那么，用这样的方法自然无法满足我们的需求。Python内置的`wraps`可以帮助我们保留住函数原本的信息。(P.S. `wraps`在`functools`包中)\n```\nfrom functools import wraps\ndef d(proc):\n    @wraps(proc)\n    def wrapper(*args, **kwargs):\n        return proc(*args, **kwargs)\n    return wrapper\n\n@d\ndef f():\n    print(\"Hello\")\n\nprint(f)\n# [Out] <function f at 0x0000000004B58730>\n\nprint(f.__name__)\n# [Out] f\n```\n\n利用好装饰器可以在用更少的代码实现更多的功能，并且也可以提高代码的复用性。设计优秀的装饰器对于调用者来说可以省去许多事情。\n\n如有不足之处，欢迎指正。\n","slug":"理解Python装饰器","published":1,"updated":"2018-06-05T07:25:45.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjik1hq900004egdmbe1bvl27","content":"<h2 id=\"1-函数是对象\"><a href=\"#1-函数是对象\" class=\"headerlink\" title=\"1. 函数是对象\"></a>1. 函数是对象</h2><p>在Python中，函数也被实现为一种对象，这意味着函数也可以当做普通的变量一样处理，赋值，作为参数传递，作为返回值返回等等。由于内部将函数实现为对象，也被很多人诟病Python中的函数并不是”一等公民”却和函数式编程中的函数具有类似的特性。在SICP中，对”一等公民”的定义是</p>\n<blockquote>\n<p>Elements with the fewest restrictions are said to have first-class status. Some of the “rights and privileges” of first-class elements are:</p>\n<ol>\n<li>They may be named by variables.</li>\n<li>They may be passed as arguments to procedures.</li>\n<li>They may be returned as the results of procedures.</li>\n<li>They may be included in data structures.</li>\n</ol>\n</blockquote>\n<p>即”一等公民”可以作为变量命名，可以作为参数用到procedures中，可以作为函数返回值返回，也可以包含在数据结构中。</p>\n<h2 id=\"2-高阶函数\"><a href=\"#2-高阶函数\" class=\"headerlink\" title=\"2. 高阶函数\"></a>2. 高阶函数</h2><p>在维基百科中<a href=\"https://zh.wikipedia.org/wiki/高阶函数\" target=\"_blank\" rel=\"noopener\">高阶函数</a>的定义如下:</p>\n<blockquote>\n<p>在数学和计算机科学中，高阶函数是至少满足下列一个条件的函数：</p>\n<ul>\n<li>接受一个或多个函数作为输入 </li>\n<li>输出一个函数</li>\n</ul>\n</blockquote>\n<p>也就是说，一个接受函数为参数或者返回一个函数的函数即为高阶函数，像Python内置的<code>map</code>、<code>filter</code>以及<code>wraps</code>等等都是高阶函数，我们常常会看到类似下面这种代码:</p>\n<pre><code>def square(x):\n    return x*x\ndata = map(square, [0, 1, 2, 3])\nprint(data)\n# Python2版本\n# [Out] [0, 1, 4, 9]\n# 如果上述代码运行在Python3环境下会是类似&lt;map object at 0x00000000060596D8&gt;的结果，这是Python3解释器将map的返回实现为生成器的原因，需要换一种方式\nprint(list(data))\n# [Out] [0, 1, 4, 9]\n\ndef is_odd(n):\n    return n%2==1\n\ndata = filter(is_odd, [0, 1, 2, 3, 4, 5, 6, 7])\nprint(list(data))\n# [Out] [1, 3, 5, 7]\n</code></pre><h2 id=\"3-闭包\"><a href=\"#3-闭包\" class=\"headerlink\" title=\"3. 闭包\"></a>3. 闭包</h2><p>维基百科中对<a href=\"https://zh.wikipedia.org/wiki/闭包_(计算机科学\" target=\"_blank\" rel=\"noopener\">闭包</a>)的定义如下:</p>\n<blockquote>\n<p>在计算机科学中，闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。</p>\n</blockquote>\n<p>简单点来说，当我们在一个函数A内定义一个函数α，且在α中引用了函数A中的变量，而且函数A的返回值对α保有引用，那么这个时候便构成了一个闭包。也就是说，此时虽然函数A已经调用完成，但是依然可以通过它的返回值找到α的引用，比如说:</p>\n<pre><code>def func(step):\n    n = 100\n    def down():\n        nonlocal n  # 此行代码在Python3版本有效，去掉此行会报错\n        n -= step\n        if n &lt; 0:\n            n = 0\n        print(n)\n    return down\n\nfoo = func(1)\nbar = func(5)\n\nfoo()\n# [Out] 99\nfoo()\n# [Out] 98\nbar()\n# [Out] 95\n</code></pre><p>在上述代码中，<code>foo</code>是一个闭包，<code>bar</code>是另一个闭包，为了能记录<code>n</code>的值，闭包必须要包含对<code>n</code>与<code>down</code>的引用，所以，闭包实际上是变量以及变量所处的环境的封装</p>\n<h2 id=\"4-装饰器\"><a href=\"#4-装饰器\" class=\"headerlink\" title=\"4. 装饰器\"></a>4. 装饰器</h2><p>说了这么多，终于来到了这篇文章的主角–装饰器。<br>装饰器是一个返回函数的高阶函数。利用装饰器，可以很方便的在执行某一个函数前做一些预处理，也可以在执行函数后执行一些预期的代码。</p>\n<pre><code>def clock(proc):\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        res = proc(*args, **kwargs)\n        end = time.time()\n        print(&quot;function %s execute %f seconds&quot; % (proc.__name__, end-start))\n        return res\n    return wrapper\n\n@clock\ndef func(n):\n    time.sleep(n)\n    print(&quot;wake up&quot;)\n\nfunc(3)\n# [Out] wake up\n#       function func execute 3.001000 seconds\n</code></pre><p>在这里，<code>func</code>函数定义前加了一行的<code>@clock</code>，等价于在定义<code>func</code>后执行<code>func = clock(func)</code>。</p>\n<p>当然，装饰器本身也能有额外的参数</p>\n<pre><code>def clock(msg):\n    def wrapper0(proc):\n        def wrapper1(*args, **kwargs):\n            print(&quot;Message from clock is &#39;%s&#39;&quot; % msg)\n            start = time.time()\n            res = proc(*args, **kwargs)\n            end = time.time()\n            print(&quot;function %s execute %f seconds&quot; % (proc.__name__, end-start))\n            return res\n        return wrapper1\n    return wrapper0\n\n@clock(&quot;Hello Lazier&quot;)\ndef func(n):\n    time.sleep(n)\n    print(&#39;wake up&#39;)\n\nfunc(3)\n\n# [Out] Message from clock is &#39;Hello Lazier&#39;\n#       wake up\n#       function func execute 3.001000 seconds\n</code></pre><h2 id=\"5-类装饰器\"><a href=\"#5-类装饰器\" class=\"headerlink\" title=\"5. 类装饰器\"></a>5. 类装饰器</h2><p>Python中的对象具有<code>__call__</code>函数，定义这个函数能够让对象和函数一样被调用。因此，在类中重写<code>__call__</code>函数即可实现类装饰器，例如:</p>\n<pre><code>class Decorator:\n    def __init__(self, proc):\n        print(&quot;Instance of Decorator init...&quot;)\n        self.proc = proc\n\n    def __call__(self, *args, **kwargs):\n        print(&quot;Instance of Decorator call...&quot;)\n        res = self.proc(*args, **kwargs)\n        return res\n\n@Decorator\ndef func():\n    print(&quot;Hello&quot;)\n# [Out] Instance of Decorator init...\n\nfunc()\n# [Out] Instance of Decorator call...\n        Hello\n</code></pre><p>当然，<code>@Decorator</code>的用法也可以用等价的python代码来实现。</p>\n<pre><code>func = Decorator(func)\n</code></pre><h2 id=\"6-装饰器的顺序\"><a href=\"#6-装饰器的顺序\" class=\"headerlink\" title=\"6. 装饰器的顺序\"></a>6. 装饰器的顺序</h2><p>一个函数可以使用多个装饰器，当函数有多个装饰器时，调用顺序为从上至下，即</p>\n<pre><code>@d0\n@d1\n@d2\ndef f():\n    pass\n</code></pre><p>等价于</p>\n<pre><code>f = d0(d1(d2(f)))\n</code></pre><h2 id=\"7-使用装饰器可能产生的后果\"><a href=\"#7-使用装饰器可能产生的后果\" class=\"headerlink\" title=\"7. 使用装饰器可能产生的后果\"></a>7. 使用装饰器可能产生的后果</h2><p>从上面可以知道，装饰器是可以用<code>f = d(f)</code>的形式来等价实现的，这之中存在一个弊端，那就是<code>f</code>此时已经变成了<code>d</code>的返回值，也就是说，<code>__name__</code>和<code>__doc__</code>都会变成<code>d</code>的返回值的<code>__name__</code>和<code>__doc__</code>。</p>\n<pre><code>def d(proc):\n    def wrapper(*args, **kwargs):\n        return proc(*args, **kwargs)\n    return wrapper\n\n@d\ndef f():\n    print(&quot;Hello&quot;)\n\nprint(f)\n# [Out] &lt;function d.&lt;locals&gt;.wrapper at 0x000000000609AA60&gt;\n\nprint(f.__name__)\n# [Out] wrapper\n</code></pre><p>在某些时候，我们需要根据函数的名字来做判断，那么，用这样的方法自然无法满足我们的需求。Python内置的<code>wraps</code>可以帮助我们保留住函数原本的信息。(P.S. <code>wraps</code>在<code>functools</code>包中)</p>\n<pre><code>from functools import wraps\ndef d(proc):\n    @wraps(proc)\n    def wrapper(*args, **kwargs):\n        return proc(*args, **kwargs)\n    return wrapper\n\n@d\ndef f():\n    print(&quot;Hello&quot;)\n\nprint(f)\n# [Out] &lt;function f at 0x0000000004B58730&gt;\n\nprint(f.__name__)\n# [Out] f\n</code></pre><p>利用好装饰器可以在用更少的代码实现更多的功能，并且也可以提高代码的复用性。设计优秀的装饰器对于调用者来说可以省去许多事情。</p>\n<p>如有不足之处，欢迎指正。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-函数是对象\"><a href=\"#1-函数是对象\" class=\"headerlink\" title=\"1. 函数是对象\"></a>1. 函数是对象</h2><p>在Python中，函数也被实现为一种对象，这意味着函数也可以当做普通的变量一样处理，赋值，作为参数传递，作为返回值返回等等。由于内部将函数实现为对象，也被很多人诟病Python中的函数并不是”一等公民”却和函数式编程中的函数具有类似的特性。在SICP中，对”一等公民”的定义是</p>\n<blockquote>\n<p>Elements with the fewest restrictions are said to have first-class status. Some of the “rights and privileges” of first-class elements are:</p>\n<ol>\n<li>They may be named by variables.</li>\n<li>They may be passed as arguments to procedures.</li>\n<li>They may be returned as the results of procedures.</li>\n<li>They may be included in data structures.</li>\n</ol>\n</blockquote>\n<p>即”一等公民”可以作为变量命名，可以作为参数用到procedures中，可以作为函数返回值返回，也可以包含在数据结构中。</p>\n<h2 id=\"2-高阶函数\"><a href=\"#2-高阶函数\" class=\"headerlink\" title=\"2. 高阶函数\"></a>2. 高阶函数</h2><p>在维基百科中<a href=\"https://zh.wikipedia.org/wiki/高阶函数\" target=\"_blank\" rel=\"noopener\">高阶函数</a>的定义如下:</p>\n<blockquote>\n<p>在数学和计算机科学中，高阶函数是至少满足下列一个条件的函数：</p>\n<ul>\n<li>接受一个或多个函数作为输入 </li>\n<li>输出一个函数</li>\n</ul>\n</blockquote>\n<p>也就是说，一个接受函数为参数或者返回一个函数的函数即为高阶函数，像Python内置的<code>map</code>、<code>filter</code>以及<code>wraps</code>等等都是高阶函数，我们常常会看到类似下面这种代码:</p>\n<pre><code>def square(x):\n    return x*x\ndata = map(square, [0, 1, 2, 3])\nprint(data)\n# Python2版本\n# [Out] [0, 1, 4, 9]\n# 如果上述代码运行在Python3环境下会是类似&lt;map object at 0x00000000060596D8&gt;的结果，这是Python3解释器将map的返回实现为生成器的原因，需要换一种方式\nprint(list(data))\n# [Out] [0, 1, 4, 9]\n\ndef is_odd(n):\n    return n%2==1\n\ndata = filter(is_odd, [0, 1, 2, 3, 4, 5, 6, 7])\nprint(list(data))\n# [Out] [1, 3, 5, 7]\n</code></pre><h2 id=\"3-闭包\"><a href=\"#3-闭包\" class=\"headerlink\" title=\"3. 闭包\"></a>3. 闭包</h2><p>维基百科中对<a href=\"https://zh.wikipedia.org/wiki/闭包_(计算机科学\" target=\"_blank\" rel=\"noopener\">闭包</a>)的定义如下:</p>\n<blockquote>\n<p>在计算机科学中，闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为闭包是由函数和与其相关的引用环境组合而成的实体。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。</p>\n</blockquote>\n<p>简单点来说，当我们在一个函数A内定义一个函数α，且在α中引用了函数A中的变量，而且函数A的返回值对α保有引用，那么这个时候便构成了一个闭包。也就是说，此时虽然函数A已经调用完成，但是依然可以通过它的返回值找到α的引用，比如说:</p>\n<pre><code>def func(step):\n    n = 100\n    def down():\n        nonlocal n  # 此行代码在Python3版本有效，去掉此行会报错\n        n -= step\n        if n &lt; 0:\n            n = 0\n        print(n)\n    return down\n\nfoo = func(1)\nbar = func(5)\n\nfoo()\n# [Out] 99\nfoo()\n# [Out] 98\nbar()\n# [Out] 95\n</code></pre><p>在上述代码中，<code>foo</code>是一个闭包，<code>bar</code>是另一个闭包，为了能记录<code>n</code>的值，闭包必须要包含对<code>n</code>与<code>down</code>的引用，所以，闭包实际上是变量以及变量所处的环境的封装</p>\n<h2 id=\"4-装饰器\"><a href=\"#4-装饰器\" class=\"headerlink\" title=\"4. 装饰器\"></a>4. 装饰器</h2><p>说了这么多，终于来到了这篇文章的主角–装饰器。<br>装饰器是一个返回函数的高阶函数。利用装饰器，可以很方便的在执行某一个函数前做一些预处理，也可以在执行函数后执行一些预期的代码。</p>\n<pre><code>def clock(proc):\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        res = proc(*args, **kwargs)\n        end = time.time()\n        print(&quot;function %s execute %f seconds&quot; % (proc.__name__, end-start))\n        return res\n    return wrapper\n\n@clock\ndef func(n):\n    time.sleep(n)\n    print(&quot;wake up&quot;)\n\nfunc(3)\n# [Out] wake up\n#       function func execute 3.001000 seconds\n</code></pre><p>在这里，<code>func</code>函数定义前加了一行的<code>@clock</code>，等价于在定义<code>func</code>后执行<code>func = clock(func)</code>。</p>\n<p>当然，装饰器本身也能有额外的参数</p>\n<pre><code>def clock(msg):\n    def wrapper0(proc):\n        def wrapper1(*args, **kwargs):\n            print(&quot;Message from clock is &#39;%s&#39;&quot; % msg)\n            start = time.time()\n            res = proc(*args, **kwargs)\n            end = time.time()\n            print(&quot;function %s execute %f seconds&quot; % (proc.__name__, end-start))\n            return res\n        return wrapper1\n    return wrapper0\n\n@clock(&quot;Hello Lazier&quot;)\ndef func(n):\n    time.sleep(n)\n    print(&#39;wake up&#39;)\n\nfunc(3)\n\n# [Out] Message from clock is &#39;Hello Lazier&#39;\n#       wake up\n#       function func execute 3.001000 seconds\n</code></pre><h2 id=\"5-类装饰器\"><a href=\"#5-类装饰器\" class=\"headerlink\" title=\"5. 类装饰器\"></a>5. 类装饰器</h2><p>Python中的对象具有<code>__call__</code>函数，定义这个函数能够让对象和函数一样被调用。因此，在类中重写<code>__call__</code>函数即可实现类装饰器，例如:</p>\n<pre><code>class Decorator:\n    def __init__(self, proc):\n        print(&quot;Instance of Decorator init...&quot;)\n        self.proc = proc\n\n    def __call__(self, *args, **kwargs):\n        print(&quot;Instance of Decorator call...&quot;)\n        res = self.proc(*args, **kwargs)\n        return res\n\n@Decorator\ndef func():\n    print(&quot;Hello&quot;)\n# [Out] Instance of Decorator init...\n\nfunc()\n# [Out] Instance of Decorator call...\n        Hello\n</code></pre><p>当然，<code>@Decorator</code>的用法也可以用等价的python代码来实现。</p>\n<pre><code>func = Decorator(func)\n</code></pre><h2 id=\"6-装饰器的顺序\"><a href=\"#6-装饰器的顺序\" class=\"headerlink\" title=\"6. 装饰器的顺序\"></a>6. 装饰器的顺序</h2><p>一个函数可以使用多个装饰器，当函数有多个装饰器时，调用顺序为从上至下，即</p>\n<pre><code>@d0\n@d1\n@d2\ndef f():\n    pass\n</code></pre><p>等价于</p>\n<pre><code>f = d0(d1(d2(f)))\n</code></pre><h2 id=\"7-使用装饰器可能产生的后果\"><a href=\"#7-使用装饰器可能产生的后果\" class=\"headerlink\" title=\"7. 使用装饰器可能产生的后果\"></a>7. 使用装饰器可能产生的后果</h2><p>从上面可以知道，装饰器是可以用<code>f = d(f)</code>的形式来等价实现的，这之中存在一个弊端，那就是<code>f</code>此时已经变成了<code>d</code>的返回值，也就是说，<code>__name__</code>和<code>__doc__</code>都会变成<code>d</code>的返回值的<code>__name__</code>和<code>__doc__</code>。</p>\n<pre><code>def d(proc):\n    def wrapper(*args, **kwargs):\n        return proc(*args, **kwargs)\n    return wrapper\n\n@d\ndef f():\n    print(&quot;Hello&quot;)\n\nprint(f)\n# [Out] &lt;function d.&lt;locals&gt;.wrapper at 0x000000000609AA60&gt;\n\nprint(f.__name__)\n# [Out] wrapper\n</code></pre><p>在某些时候，我们需要根据函数的名字来做判断，那么，用这样的方法自然无法满足我们的需求。Python内置的<code>wraps</code>可以帮助我们保留住函数原本的信息。(P.S. <code>wraps</code>在<code>functools</code>包中)</p>\n<pre><code>from functools import wraps\ndef d(proc):\n    @wraps(proc)\n    def wrapper(*args, **kwargs):\n        return proc(*args, **kwargs)\n    return wrapper\n\n@d\ndef f():\n    print(&quot;Hello&quot;)\n\nprint(f)\n# [Out] &lt;function f at 0x0000000004B58730&gt;\n\nprint(f.__name__)\n# [Out] f\n</code></pre><p>利用好装饰器可以在用更少的代码实现更多的功能，并且也可以提高代码的复用性。设计优秀的装饰器对于调用者来说可以省去许多事情。</p>\n<p>如有不足之处，欢迎指正。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjik1hq900001egdmps6wa0az","category_id":"cjik1hq900002egdm56elp9do","_id":"cjik1hq9f0008egdmt9jydzfd"},{"post_id":"cjik1hq900004egdmbe1bvl27","category_id":"cjik1hq900002egdm56elp9do","_id":"cjik1hq9f000aegdm553i5p75"},{"post_id":"cjik1hq900004egdmbe1bvl27","category_id":"cjik1hq9f0007egdmkyt1flvc","_id":"cjik1hq9f000cegdmn3nlfu6m"},{"post_id":"cjik1hq900000egdmoc4821xs","category_id":"cjik1hq900002egdm56elp9do","_id":"cjik1hq9f000degdm3iyc8yo3"},{"post_id":"cjik1hq900000egdmoc4821xs","category_id":"cjik1hq9f0009egdml2i4u9ji","_id":"cjik1hq9f000eegdm64f68q5b"},{"post_id":"cjik1hq900003egdm7rp2ysyt","category_id":"cjik1hq900002egdm56elp9do","_id":"cjik1hq9f000gegdmu3m11xne"},{"post_id":"cjik1hq900003egdm7rp2ysyt","category_id":"cjik1hq9f000begdm70yvc4bk","_id":"cjik1hq9f000hegdmw5nepqx4"},{"post_id":"cjik1hq900003egdm7rp2ysyt","category_id":"cjik1hq9f000fegdmrx5ubxsn","_id":"cjik1hq9f000iegdm4ye1vo61"}],"PostTag":[],"Tag":[]}}